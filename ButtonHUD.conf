name: ButtonsHud - Dimencia and Archaegeo v4.926 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down)  Does not affect selecting buttons or camera.
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        PrimaryR = 130 --export: (Default: 130) Primary HUD color
        PrimaryG = 224 --export: (Default: 224) Primary HUD color
        PrimaryB = 255 --export: (Default: 255) Primary HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: (Default: 35) Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: (Default: 50000) How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;AtmoSpeedLimitIsOff=false;local a={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","StallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=round(ResolutionX/2,0)local t=round(ResolutionY/2,0)local u=false;local v=true;local w=55;local x=false;local y=1;local z=1;local A=false;local B=0;local C=0;local D=0;local E=0;local F=0;local G=0;local H=0;local I=false;local J=false;local K="empty"local L=1;local M=5;local N=5;local O=false;local P,Q=0,0;local R,S=0,0;local T=false;local U=false;local V=nil;local W=0;local X=0;local Y=false;local Z=0;local a0=0;local a1=0;local a2=3;local a3=0;local a4=""local a5=""local a6=0;local a7=false;local a8=false;local a9=false;local aa=-1;local ab=false;local ac=""local ad=j()>0;local ae=math.floor(core.getAltitude())local af=core.getElementIdList()local ag=system.getTime()local ah=nil;local ai=false;local aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local al={}local am=0;local an=0;local ao=""local ap=true;local aq={}local ar=1;local as=0.001;local at=ResolutionX;local au=ResolutionY;local av=nil;local aw=nil;local ax=nil;local ay=nil;local az=false;local aA=false;local aB=0;local aC=nil;local aD={}local aE={}local aF={}local aG=0;local aH=false;local aI={}local aJ={}local aK=d(1/apTickRate)*2;local aL={}local aM={}local aN={}local aO={}local aP=false;local aQ=16;local aR=0;local aS=nil;local aT=""local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=nil;local a_=nil;local b0=false;local b1=false;local b2=autoRollPreference;local b3=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local b4=vec3(core.getWorldVelocity())local b5=vec3(b4):len()local b6=math.cos(StallAngle*constants.deg2rad)local b7=LandingGearGroundHeight;local b8=system.getMouseDeltaX()local b9=system.getMouseDeltaY()function LoadVariables()if dbHud_1 then local ba=dbHud_1.hasKey;if not useTheseSettings then for bb,bc in pairs(a)do if ba(bc)then local bd=f(dbHud_1.getStringValue(bc))if bd~=nil then c(bc.." "..dbHud_1.getStringValue(bc))_G[bc]=bd;az=true end end end end;coroutine.yield()for bb,bc in pairs(b)do if ba(bc)then local bd=f(dbHud_1.getStringValue(bc))if bd~=nil then c(bc.." "..dbHud_1.getStringValue(bc))_G[bc]=bd;az=true end end end;if useTheseSettings then K="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a2=5 elseif az then K="Loaded Saved Variables (see Lua Chat Tab for list)"else K="No Saved Variables Found - Stand up / leave remote to save settings"end else K="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local be=system.getTime()if LastStartTime+180<be then LastMaxBrakeInAtmo=0 end;if az then s=round(ResolutionX/2,0)t=round(ResolutionY/2,0)at=ResolutionX;au=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b2=autoRollPreference end;LastStartTime=be;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then K="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a2=5 end;b6=math.cos(StallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]end;function CalculateFuelVolume(bf,bg)if bf>bg then bg=bf end;if ContainerOptimization>0 then bg=bg-bg*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bg=bg-bg*FuelTankOptimization*0.05 end;return bg end;function ProcessElements()for bb in pairs(af)do local type=l(af[bb])if type=="landing gear"then A=true end;if type=="dynamic core"then local bh=h(af[bb])if bh>10000 then aQ=128 elseif bh>1000 then aQ=64 elseif bh>150 then aQ=32 end end;aG=aG+h(af[bb])if fuelX~=0 and fuelY~=0 then if type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank"then local bh=h(af[bb])local bi=m(af[bb])local bf=0;local bj=system.getTime()if type=="Atmospheric Fuel Tank"then local bg=400;local bk=35.03;if bh>10000 then bg=51200;bk=5480 elseif bh>1300 then bg=6400;bk=988.67 elseif bh>150 then bg=1600;bk=182.67 end;bf=bi-bk;if fuelTankHandlingAtmo>0 then bg=bg+bg*fuelTankHandlingAtmo*0.2 end;bg=CalculateFuelVolume(bf,bg)aD[#aD+1]={af[bb],core.getElementNameById(af[bb]),bg,bk,bf,bj}end;if type=="Rocket Fuel Tank"then local bg=320;local bk=173.42;if bh>65000 then bg=40000;bk=25740 elseif bh>6000 then bg=5120;bk=4720 elseif bh>700 then bg=640;bk=886.72 end;bf=bi-bk;if fuelTankHandlingRocket>0 then bg=bg+bg*fuelTankHandlingRocket*0.2 end;bg=CalculateFuelVolume(bf,bg)aF[#aF+1]={af[bb],core.getElementNameById(af[bb]),bg,bk,bf,bj}end;if type=="Space Fuel Tank"then local bg=2400;local bk=182.67;if bh>10000 then bg=76800;bk=5480 elseif bh>1300 then bg=9600;bk=988.67 end;bf=bi-bk;if fuelTankHandlingSpace>0 then bg=bg+bg*fuelTankHandlingSpace*0.2 end;bg=CalculateFuelVolume(bf,bg)aE[#aE+1]={af[bb],core.getElementNameById(af[bb]),bg,bk,bf,bj}end end end end end;function SetupChecks()if gyro~=nil then ah=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if ad then BrakeIsOn=true end;if radar_1 then if l(radar_1.getId())=="Space Radar"then T=true else U=true end end;if door then for _,bc in pairs(door)do bc.toggle()end end;if switch then for _,bc in pairs(switch)do bc.toggle()end end;if forcefield then for _,bc in pairs(forcefield)do bc.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if A then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if b7~=nil then Nav.axisCommandManager:setTargetGroundAltitude(b7)if b7==0 and not A then GearExtended=true end else b7=Nav:getTargetGroundAltitude()if GearExtended or not A then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ad and not dbHud_1 and(GearExtended or not A)then BrakeIsOn=true end;WasInAtmo=ad end;function ConvertResolutionX(bc)if ResolutionX==1920 then return bc else return round(ResolutionX*bc/1920,0)end end;function ConvertResolutionY(bc)if ResolutionY==1080 then return bc else return round(ResolutionY*bc/1080,0)end end;function RefreshLastMaxBrake(bl,bm)if bl==nil then bl=core.g()end;bl=round(bl,5)local bn=j()if bm~=nil and bm or(aC==nil or aC~=bl)then local b4=core.getVelocity()local bo=vec3(b4):len()local bp=f(unit.getData()).maxBrake;if bp~=nil and bp>0 and ad then bp=bp/utils.clamp(bo/100,0.1,1)bp=bp/bn;if bp>LastMaxBrakeInAtmo and bn>0.10 then LastMaxBrakeInAtmo=bp end end;if bp~=nil and bp>0 then LastMaxBrake=bp end;aC=bl end end;function MakeButton(bq,br,bs,bt,bu,bv,bw,bx,by)local bz={enableName=bq,disableName=br,width=bs,height=bt,x=bu,y=bv,toggleVar=bw,toggleFunction=bx,drawCondition=by,hovered=false}table.insert(aq,bz)return bz end;function UpdateAtlasLocationsList()AtlasOrdered={}for bb,bc in pairs(aS[0])do table.insert(AtlasOrdered,{name=bc.name,index=bb})end;local function bA(bB,bC)return bB.name<bC.name end;table.sort(AtlasOrdered,bA)end;function AddLocationsToAtlas()for bb,bc in pairs(SavedLocations)do table.insert(aS[0],bc)end;UpdateAtlasLocationsList()end;function zeroConvertToWorldCoordinates(bD)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bE='::pos{'..p..','..p..','..p..','..p..','..p..'}'local bF,bG,bH,bI,altitude=string.match(bD,bE)if bF=="0"and bG=="0"then return vec3(tonumber(bH),tonumber(bI),tonumber(altitude))end;bI=math.rad(bI)bH=math.rad(bH)local planet=aS[tonumber(bF)][tonumber(bG)]local bJ=math.cos(bH)local bK=vec3(bJ*math.cos(bI),bJ*math.sin(bI),math.sin(bH))return planet.center+(planet.radius+altitude)*bK end;function AddNewLocationByWaypoint(bL,planet,bD)if dbHud_1 then local bM={}local position=zeroConvertToWorldCoordinates(bD)if planet.name=="Space"then bM={position=position,name=bL,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bN=false;if planet.atmos then bN=true else bN=false end;bM={position=position,name=bL,atmosphere=bN,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=bM;table.insert(aS[0],bM)UpdateAtlasLocationsList()else K="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local bO=planet.name..". "..#SavedLocations;if radar_1 then local bP,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if bP~=nil and bP~=""then bO=bO.." "..radar_1.getConstructName(bP)end end;local bM={}local bN=false;if planet.atmos then bN=true end;bM={position=position,name=bO,atmosphere=bN,planetname=planet.name,gravity=planet.gravity}SavedLocations[#SavedLocations+1]=bM;table.insert(aS[0],bM)UpdateAtlasLocationsList()K="Location saved as "..bO else K="Databank must be installed to save locations"end end;function UpdatePosition(bQ)local bR=-1;local bM;for bb,bc in pairs(SavedLocations)do if bc.name and bc.name==CustomTarget.name then bR=bb;break end end;if bR~=-1 then local bS;if bQ~=nil then bM={position=SavedLocations[bR].position,name=bQ,atmosphere=SavedLocations[bR].atmosphere,planetname=SavedLocations[bR].planetname,gravity=SavedLocations[bR].gravity}else bM={position=vec3(core.getConstructWorldPos()),name=SavedLocations[bR].name,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}end;SavedLocations[bR]=bM;bR=-1;for bb,bc in pairs(aS[0])do if bc.name and bc.name==CustomTarget.name then bR=bb end end;if bR>-1 then aS[0][bR]=bM end;UpdateAtlasLocationsList()K=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else K="Name Not Found"end end;function ClearCurrentPosition()local bR=-1;for bb,bc in pairs(aS[0])do if bc.name and bc.name==CustomTarget.name then bR=bb end end;if bR>-1 then table.remove(aS[0],bR)end;bR=-1;for bb,bc in pairs(SavedLocations)do if bc.name and bc.name==CustomTarget.name then K=bc.name.." saved location cleared"bR=bb;break end end;if bR~=-1 then table.remove(SavedLocations,bR)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(bT)bT[#bT+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and a6==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if a6==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;a6=0 end end;function ToggleWidgets()if ap then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ap=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ap=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(bU,bV,bu,bv,bs,bt)if bU>bu and bU<bu+bs and bV>bv and bV<bv+bt then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;if not StrongBrakes and b5>w then K="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local bW=vec3(core.getConstructWorldOrientationForward())local bX=vec3(core.getConstructWorldOrientationRight())local bY=vec3(core.getWorldVertical())local bZ=getPitch(bY,bW,bX)LockPitch=bZ;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then M,OldButtonMod=5,5;Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;I=false;BrakeLanding=false;Reentry=false;b2=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not ad then AutoTakeoff=false;HoldAltitude=ae;if not a8 and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end;if a8 then HoldAltitude=100000 end else b2=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then I=not I;if I then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b2=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else K="Follow Mode only works with Remote controller"I=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not a8 then if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b5>w then K="Insufficient Brake Force\nCoast landing will be inaccurate"end;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if ae>100000 or ae==0 then Autopilot=true else a7=true end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;I=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;u=false;LockPitch=nil else a8=true;ToggleAltitudeHold()end else a8=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;u=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ae end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b2=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;LockPitch=nil;b2=autoRollPreference end end;function CheckDamage(bT)local b_=0;ao=""local c0=aG;local c1=0;local c2=0;local c3=0;local c4=0;local c5=""for bb in pairs(af)do local bh=0;local c6=0;c6=h(af[bb])bh=k(af[bb])c1=c1+bh;if bh<c6 then if bh==0 then c3=c3+1 else c2=c2+1 end;if aH and#al==0 then position=vec3(core.getElementPositionById(af[bb]))local bu=position.x-aQ;local bv=position.y-aQ;local c7=position.z-aQ;table.insert(al,core.spawnArrowSticker(bu,bv,c7+1,"down"))table.insert(al,core.spawnArrowSticker(bu,bv,c7+1,"down"))core.rotateSticker(al[2],0,0,90)table.insert(al,core.spawnArrowSticker(bu+1,bv,c7,"north"))table.insert(al,core.spawnArrowSticker(bu+1,bv,c7,"north"))core.rotateSticker(al[4],90,90,0)table.insert(al,core.spawnArrowSticker(bu-1,bv,c7,"south"))table.insert(al,core.spawnArrowSticker(bu-1,bv,c7,"south"))core.rotateSticker(al[6],90,-90,0)table.insert(al,core.spawnArrowSticker(bu,bv-1,c7,"east"))table.insert(al,core.spawnArrowSticker(bu,bv-1,c7,"east"))core.rotateSticker(al[8],90,0,90)table.insert(al,core.spawnArrowSticker(bu,bv+1,c7,"west"))table.insert(al,core.spawnArrowSticker(bu,bv+1,c7,"west"))core.rotateSticker(al[10],-90,0,90)table.insert(al,af[bb])end elseif aH and#al>0 and al[11]==af[bb]then for c8 in pairs(al)do core.deleteSticker(al[c8])end;al={}end end;b_=d(c1/c0*100)if b_<100 then bT[#bT+1]=[[<g class="pbright txt">]]c4=d(b_*2.55)c5=e("rgb(%d,%d,%d)",255-c4,c4,0)if b_<100 then bT[#bT+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],c5,b_)if c3>0 then bT[#bT+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],c5,c3,c2)elseif c2>0 then bT[#bT+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],c5,c2)end end;bT[#bT+1]=[[<\g>]]end end;function DrawCursorLine(bT)local c9=d(utils.clamp(a3/(at/4)*255,0,255))bT[#bT+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a0,a1,d(PrimaryR+0.5)+c9,d(PrimaryG+0.5)-c9,d(PrimaryB+0.5)-c9)end;function getPitch(ca,cb,bC)local cc=ca:cross(bC):normalize_inplace()local bZ=math.acos(utils.clamp(cc:dot(-cb),-1,1))*constants.rad2deg;if cc:cross(-cb):dot(bC)<0 then bZ=-bZ end;return bZ end;function clearAll()if ab then ab=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;I=false;u=false;a7=false;a8=false;x=false;b2=autoRollPreference;VectorToTarget=false;TurnBurn=false;ah=false;LockPitch=nil;AtmoSpeedLimitIsOff=false else ab=true end end;function wipeSaveVariables()if not dbHud_1 then K="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"a2=5 else if aA then for bb,bc in pairs(a)do dbHud_1.setStringValue(bc,g(nil))end;for bb,bc in pairs(b)do if bc~="SavedLocations"then dbHud_1.setStringValue(bc,g(nil))end end;K="Databank wiped. New variables will save after re-enter seat and exit"a2=5;aA=false;az=false;Y=true else K="Press ALT-7 again to confirm wipe of ALL data"aA=true end end end;function CheckButtons()for _,bc in pairs(aq)do if bc.hovered then if not bc.drawCondition or bc.drawCondition()then bc.toggleFunction()end;bc.hovered=false end end end;function SetButtonContains()local bu=a0+at/2;local bv=a1+au/2;for _,bc in pairs(aq)do bc.hovered=Contains(bu,bv,bc.x,bc.y,bc.width,bc.height)end end;function DrawButton(bT,cd,hover,bu,bv,ce,cf,cg,ch,ci,cj)if type(ci)=="function"then ci=ci()end;if type(cj)=="function"then cj=cj()end;bT[#bT+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bu,bv,ce,cf)if cd then bT[#bT+1]=e("%s'",cg)else bT[#bT+1]=ch end;if hover then bT[#bT+1]=" style='stroke:white; stroke-width:2'"else bT[#bT+1]=" style='stroke:black; stroke-width:1'"end;bT[#bT+1]="></rect>"bT[#bT+1]=e("<text x='%f' y='%f' font-size='24' fill='",bu+ce/2,bv+cf/2+5)if cd then bT[#bT+1]="black"else bT[#bT+1]="white"end;bT[#bT+1]="' text-anchor='middle' font-family='Montserrat'>"if cd then bT[#bT+1]=e("%s</text>",ci)else bT[#bT+1]=e("%s</text>",cj)end end;function DrawButtons(bT)local ck="rgb(50,50,50)'"local cl="rgb(210,200,200)"local cm=DrawButton;for _,bc in pairs(aq)do local br=bc.disableName;local bq=bc.enableName;if type(br)=="function"then br=br()end;if type(bq)=="function"then bq=bq()end;if not bc.drawCondition or bc.drawCondition()then cm(bT,bc.toggleVar(),bc.hovered,bc.x,bc.y,bc.width,bc.height,cl,ck,br,bq)end end end;function DrawTank(bT,aP,bu,cn,co,cp,cq,cr)local cs=1;local ct=2;local cu=3;local cv=4;local cw=5;local cx=6;local cy=""local cz=0;local cA=fuelY;local cB=fuelY+10;if o()==1 and not RemoteHud then cA=cA-50;cB=cB-50 end;bT[#bT+1]=[[<g class="pdim txtfuel">]]if co=="ATMO"then cy="atmofueltank"elseif co=="SPACE"then cy="spacefueltank"else cy="rocketfueltank"end;cz=_G[cy.."_size"]if#cp>0 then for i=1,#cp do local bO=string.sub(cp[i][ct],1,12)local cC=0;for c8=1,cz do if cp[i][ct]==f(unit[cy.."_"..c8].getData()).name then cC=c8;break end end;if aP or cq[i]==nil or cr[i]==nil then local cD=0;local cE=0;local cF=0;local cG=0;local bj=system.getTime()if cC~=0 then cr[i]=f(unit[cy.."_"..cC].getData()).percentage;cq[i]=f(unit[cy.."_"..cC].getData()).timeLeft;if cq[i]=="n/a"then cq[i]=0 end else cF=m(cp[i][cs])-cp[i][cv]cD=cp[i][cu]cr[i]=d(0.5+cF*100/cD)cE=cp[i][cw]cG=cp[i][cx]if cE<=cF then cq[i]=0 else cq[i]=d(0.5+cF/((cE-cF)/(bj-cG)))end;cp[i][cw]=cF;cp[i][cx]=bj end end;if bO==cn then bO=e("%s %d",co,i)end;if cC==0 then bO=bO.." *"end;local cH;if cq[i]==0 then cH="n/a"else cH=FormatTimeString(cq[i])end;if cr[i]~=nil then local c4=d(cr[i]*2.55)local c5=e("rgb(%d,%d,%d)",255-c4,c4,0)local cI=""if cH~="n/a"and cq[i]<120 or cr[i]<5 then if aP then cI=[[class="red"]]end end;bT[#bT+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bu,cA,cI,bO,bu,cB,c5,cr[i],cH)cA=cA+30;cB=cB+30 end end end;bT[#bT+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(b4)b4=vec3(b4)local bZ=-math.deg(math.atan(b4.y,b4.z))+180;bZ=bZ-90;if bZ<0 then bZ=360+bZ end;if bZ>180 then bZ=-180+bZ-180 end;return-bZ end;function getRelativeYaw(b4)b4=vec3(b4)local cJ=math.deg(math.atan(b4.y,b4.x))-90;if cJ<-180 then cJ=360+cJ end;return cJ end;function AlignToWorldVector(cK,cL)if not ad or b3>b6+0.08 or aa~=-1 then if cL==nil then cL=as end;cK=vec3(cK):normalize()local cM=vec3(core.getConstructWorldOrientationForward())-cK;local cN=-getMagnitudeInDirection(cM,core.getConstructWorldOrientationRight())*ar;local cO=-getMagnitudeInDirection(cM,core.getConstructWorldOrientationUp())*ar;if am==0 then am=cN/2 end;if an==0 then an=cO/2 end;D=D-(cN+(cN-am)*DampingMultiplier)C=C+cO+(cO-an)*DampingMultiplier;am=cN;an=cO;if math.abs(cN)<cL and math.abs(cO)<cL then return true end;return false end end;function getAPEnableName()local bO=AutopilotTargetName;if bO==nil then bO=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if bO==nil then bO="None"end;return"Engage Autopilot: "..bO end;function getAPDisableName()local bO=AutopilotTargetName;if bO==nil then bO=CustomTarget.name end;if bO==nil then bO="None"end;return"Disable Autopilot: "..bO end;function ToggleAntigrav()if antigrav and not ExternalAGG then N,OldAntiMod=5,5;if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then K="Re-Entry cancelled"Reentry=false;b2=autoRollPreference;AltitudeHold=false elseif j()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then K="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"a2=5 elseif not x then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then K="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b2=true;BrakeIsOn=false;K="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;b2=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;K="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;function SetupButtons()local cP=50;local cQ=260;local cR=MakeButton("Enable Brake Toggle","Disable Brake Toggle",cQ,cP,at/2-cQ/2,au/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then K="Brakes in Toggle Mode"else K="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",cQ,cP,at/2-cQ/2-50-cR.width,au/2-cP+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",cQ,cP,at/2-cQ/2+cR.width+50,au/2-cP+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local cS=MakeButton(getAPEnableName,getAPDisableName,600,60,at/2-600/2,au/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,cS.height,cS.x+cS.width+30,cS.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,cS.height,cS.x+cS.width+30,cS.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,cS.height,cS.x-200-30,cS.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)cP=60;cQ=300;local bu=10;local bv=au/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",cQ,cP,bu,bv,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",cQ,cP,bu+cQ+20,bv,function()return AltitudeHold end,ToggleAltitudeHold)bv=bv+cP+20;MakeButton("Engage Autoland","Disable Autoland",cQ,cP,bu,bv,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",cQ,cP,bu+cQ+20,bv,function()return AutoTakeoff end,ToggleAutoTakeoff)bv=bv+cP+20;MakeButton("Show Orbit Display","Hide Orbit Display",cQ,cP,bu,bv,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then K="Orbit Display Enabled"else K="Orbit Display Disabled"end end)MakeButton("Enable Speed Limit","Disable Speed Limit",cQ,cP,bu+cQ+20,bv,function()return not AtmoSpeedLimitIsOff end,function()AtmoSpeedLimitIsOff=not AtmoSpeedLimitIsOff;if AtmoSpeedLimitIsOff then K="Atmo Speed Limit Disabled"else K="Atmo Speed Limit Enabled"end end)bv=bv+cP+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",cQ,cP,bu,bv,function()return Reentry end,function()x=true;BeginReentry()end,function()return ae>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",cQ,cP,bu+cQ+20,bv,function()return Reentry end,BeginReentry,function()return ae>ReentryAltitude end)bv=bv+cP+20;MakeButton("Engage Follow Mode","Disable Follow Mode",cQ,cP,bu,bv,function()return I end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",cQ,cP,bu+cQ+20,bv,function()return aH end,function()aH=not aH;if aH then K="Repair Arrows Enabled"else K="Repair Arrows Disabled"end end,function()return o()==1 end)bv=bv+cP+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",cQ,cP,bu,bv,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bv=bv+cP+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,cQ*2,cP,bu,bv,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local cT=Nav.axisCommandManager:getAxisCommandType(0)local cU="TRAVEL"if cT==1 then cU="CRUISE"end;if Autopilot then cU="AUTOPILOT"end;return cU end;function UpdateHud(bT)local altitude=ae;local b4=core.getVelocity()local bo=vec3(b4):len()local bY=vec3(core.getWorldVertical())local bW=vec3(core.getConstructWorldOrientationForward())local bX=vec3(core.getConstructWorldOrientationRight())local cV=vec3(core.getConstructWorldOrientationUp())local cW=getRoll(bY,bW,bX)local cX=cW/180*math.pi;local cY=math.cos(cX)local cZ=math.sin(cX)local bZ=getPitch(bY,bW,bX*cY+cV*cZ)local c_=cW;local d0=bZ;local d1=j()local d2=d(unit.getThrottle())local d3=bo*3.6;local d4=unit.getAxisCommandValue(0)local cU=GetFlightStyle()local d5="ROLL"local d6=unit.getClosestPlanetInfluence()>0;if d2==nil then d2=0 end;if not d6 then if bo>5 then bZ=getRelativePitch(b4)cW=getRelativeYaw(b4)else bZ=0;cW=0 end;d5="YAW"end;bT[#bT+1]=a5;bT[#bT+1]=ao;bT[#bT+1]=a4;if aR%aK==0 then aP=true end;if fuelX~=0 and fuelY~=0 then DrawTank(bT,aP,fuelX,"Atmospheric ","ATMO",aD,aN,aO)DrawTank(bT,aP,fuelX+100,"Space fuel t","SPACE",aE,aL,aM)DrawTank(bT,aP,fuelX+200,"Rocket fuel ","ROCKET",aF,aI,aJ)end;if aP then aP=false;aR=0 end;aR=aR+1;DrawVerticalSpeed(bT,altitude)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if d6 then DrawRollLines(bT,centerX,centerY,c_,d5,d6)DrawArtificialHorizon(bT,d0,c_,centerX,centerY,d6,d(getRelativeYaw(b4)),bo)else DrawRollLines(bT,centerX,centerY,cW,d5,d6)DrawArtificialHorizon(bT,bZ,cW,centerX,centerY,d6,d(cW),bo)end;DrawAltitudeDisplay(bT,altitude,d6)DrawPrograde(bT,b4,bo,centerX,centerY)end end;DrawThrottle(bT,cU,d2,d4)DrawSpeed(bT,d3)DrawWarnings(bT)DisplayOrbitScreen(bT)if screen_2 then local bD=vec3(core.getConstructWorldPos())local bu=960+bD.x/aU;local bv=450+bD.y/aV;screen_2.moveContent(aW,(bu-80)/19.2,(bv-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(bT)local d7=aj;local d8=ak;local d9=aj;local da=ak;if IsInFreeLook()and not brightHud then d7=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]d8=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;bT[#bT+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],d7,d7,d9,d9,d8,d8,da,da,ResolutionX,ResolutionY)end;function HUDEpilogue(bT)bT[#bT+1]="</svg>"end;function DrawSpeed(bT,d3)local db=throtPosY-10;local dc=throtPosX+10;bT[#bT+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then db=75 end;bT[#bT+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],dc,db,d(d3))end;function DrawOdometer(bT,W,TotalDistanceTravelled,cU,X,d1)local dd=ConvertResolutionX(1240)local de=ConvertResolutionY(55)local df=de+10;local d1=j()local bl=core.g()local dg=0;local dh=0;local di=0;RefreshLastMaxBrake(bl)if ad then di=LastMaxBrakeInAtmo else di=LastMaxBrake end;maxThrust=Nav:maxForceForward()aB=n()if not ShowOdometer then return end;local dj=vec3(core.getWorldAcceleration()):len()/9.80665;if bl>0.1 then dh=aB*bl;dg=maxThrust/bl end;bT[#bT+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dd=ConvertResolutionX(1120)de=ConvertResolutionY(55)df=de+10 elseif ad then local dk=ConvertResolutionX(770)bT[#bT+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],dk,de,dk,df,d1)end;bT[#bT+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],dd,de,dd,df,bl/9.80665,dd,de+20,dd,df+20,dj)bT[#bT+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then bT[#bT+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),W,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(X),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aB/1000,ConvertResolutionX(1240),ConvertResolutionY(10),di/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),cU)if bl>0.1 then bT[#bT+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),dg/1000,ConvertResolutionX(1240),ConvertResolutionY(20),dh/1000)else bT[#bT+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else bT[#bT+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),cU)end;bT[#bT+1]="</g>"end;function DrawThrottle(bT,cU,d2,d4)local cA=throtPosY+10;local cB=throtPosY+20;if o()==1 and not RemoteHud then cA=55;cB=65 end;local dl="CRUISE"local unit="km/h"local dm=d4;if cU=="TRAVEL"or cU=="AUTOPILOT"then dl="THROT"unit="%"dm=d2;local dn="dim"if d2<0 then dn="red"end;bT[#bT+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],dn,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(d2),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;bT[#bT+1]=e([[
                <g class="pbright txtstart">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d %s</text>
                </g>
            </g>]],throtPosX+10,cA,dl,throtPosX+10,cB,dm,unit)end;function DrawVerticalSpeed(bT,altitude)if altitude<200000 and not ad or altitude and ad then local dp=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local dq=0;if math.abs(dp)>1 then dq=45*math.log(math.abs(dp),10)if dp<0 then dq=-dq end end;bT[#bT+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(dp),d(dq))end end;function getHeading(cb)local dr=-vec3(core.getWorldVertical())cb=cb-cb:project_on(dr)local ds=vec3(0,0,1)ds=ds-ds:project_on(dr)local dt=ds:cross(dr)local dq=ds:angle_between(cb)*constants.rad2deg;if cb:dot(dt)<0 then dq=360-dq end;return dq end;function DrawRollLines(bT,centerX,centerY,c_,d5,d6)local du=circleRad;local dv=20;dv=d(dv)local dw=d(c_)if d6 then for i=-45,45,5 do local dx=i;bT[#bT+1]=e([[<g transform="rotate(%f,%d,%d)">]],dx,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;bT[#bT+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+du+dv-len,centerX,centerY+du+dv)end;bT[#bT+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+du+dv-35,d5,centerX,centerY+du+dv-25,dw)bT[#bT+1]=e([[<g transform="rotate(%f,%d,%d)">]],-c_,centerX,centerY)bT[#bT+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+du+dv-20,centerX+5,centerY+du+dv-20,centerX,centerY+du+dv-15)bT[#bT+1]="</g>"end;local cJ=dw;if d6 then cJ=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local dy=20;local dz=d(cJ)local dA=0;local dB=centerY+du+dv+20;local dC=centerX;if d5~="YAW"then dB=ConvertResolutionY(130)dC=ConvertResolutionX(960)end;local dD=[[<path class="txttick line" d="]]for i=d(dz-(dy+10)-dz%5+0.5),d(dz+dy+10+dz%5+0.5),5 do local bu=dC+-i*5+cJ*5;if i%10==0 then dA=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;bT[#bT+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bu+5,dB-12,p)elseif i%5==0 then dA=5 end;if dA==10 then dD=e([[%s M %f %f v %d]],dD,bu,dB-5,dA)else dD=e([[%s M %f %f v %d]],dD,bu,dB-2.5,dA)end end;bT[#bT+1]=dD..[["/>]]bT[#bT+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],dC-5,dB+10,dC+5,dB+10,dC,dB+5)if d6 then d5="HDG"end;bT[#bT+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],dC,dB+25,dz,dC,dB+35,d5)end;function DrawArtificialHorizon(bT,d0,c_,centerX,centerY,d6,dE,bo)local du=circleRad;local dF=d(du*3/5)if du>0 then local dG=d(d0)local len=0;local dD=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*c_,centerX,centerY)if not ad then dD=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;bT[#bT+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],du-1,centerX,centerY)bT[#bT+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(dG-30-dG%5+0.5),d(dG+30+dG%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bv=centerY+-i*5+d0*5;if len==30 then dD=e([[%s M %d %f h %d]],dD,centerX-dF-len,bv,len)if ad then bT[#bT+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*c_,centerX,centerY,centerX-dF+10,bv,i)bT[#bT+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*c_,centerX,centerY,centerX+dF-10,bv,i)if i==0 or i==180 or i==-180 then bT[#bT+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*c_,centerX,centerY,centerX-dF+20,bv,dF*2-40)end else bT[#bT+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-dF+10,bv,i)bT[#bT+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+dF-10,bv,i)end;dD=e([[%s M %d %f h %d]],dD,centerX+dF,bv,len)else dD=e([[%s M %d %f h %d]],dD,centerX-dF-len,bv,len)dD=e([[%s M %d %f h %d]],dD,centerX+dF,bv,len)end end;bT[#bT+1]=dD..[["/>]]local dH="PITCH"if not d6 then dH="REL PITCH"end;if d0>90 and not ad then d0=90-(d0-90)elseif d0<-90 and not ad then d0=-90-(d0+90)end;if du>200 then if ad then if bo>w then bT[#bT+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,dE)end;bT[#bT+1]=e([[<g transform="rotate(%f,%d,%d)">]],-c_,centerX,centerY)else bT[#bT+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;bT[#bT+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-dF+25,centerY-5,centerX-dF+20,centerY,centerX-dF+25,centerY+5,centerX-dF+50,centerY+4,dG)bT[#bT+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+dF-25,centerY-5,centerX+dF-20,centerY,centerX+dF-25,centerY+5,centerX+dF-30,centerY+4,dG)bT[#bT+1]="</g>"end;local dI=d(du/3)bT[#bT+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-dI,centerY,du-dI)if not ad and d6 then bT[#bT+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*c_,centerX,centerY,centerX-dF+10,centerY,dF*2-20)end;bT[#bT+1]="</g>"if du<200 then if ad and bo>w then bT[#bT+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-du,dH,centerX,centerY-du+10,dG,centerX,centerY-15,"Yaw",centerX,centerY+20,dE)else bT[#bT+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-du,dH,centerX,centerY-du+15,dG)end end end end;function DrawAltitudeDisplay(bT,altitude,d6)local dJ=altMeterX;local dK=altMeterY;local dL=78;local dM=19;local dN=AboveGroundLevel()if dN~=-1 then table.insert(bT,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],dJ+dL,dK+dM+20,dN))end;if d6 and(altitude<200000 and not ad or altitude and ad)then table.insert(bT,e([[
                    <g class="pdim">
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/>
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],dJ-1,dK-4,dL+2,dM+6,dJ+1,dK-1,dL-4,dM))local bR=0;local dO=1;local dP=0;local dQ=altitude<0;local dR=9;if dQ then dR=0 end;local altitude=math.abs(altitude)while bR<6 do local dS=11;local dT=16;local dU=9;local dV=14;local cI="altsm"if bR>2 then dT=dT+3;dS=dS+2;dV=dV+2;dU=dU-6;cI="altbig"end;if dQ then cI=cI.." red"end;local dW=altitude/dO%10;local dX=d(dW)local dY=d((dX+1)%10)local dZ=dP;if bR==0 then dZ=dW-dX;if dQ then dZ=1-dZ end end;if dQ and(bR==0 or dP~=0)then local d_=dY;dY=dX;dX=d_ end;local e0=dT*(dZ-1)local e1=e0+dT;local bu=dJ+dU+(6-bR)*dS;local bv=dK+dV;table.insert(bT,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],cI,bu,bv+e0,dY,bu,bv+e1,dX))bR=bR+1;dO=dO*10;if dX==dR then dP=dZ else dP=0 end end;table.insert(bT,[[</g></g>]])end end;function DrawPrograde(bT,b4,bo,centerX,centerY)if bo>5 and not ad or bo>w then local du=circleRad;local e2=20;local e3=20;local e4=vec3(b4)local e5=getRelativePitch(e4)local e6=getRelativeYaw(e4)local e7=-e6/e3*du;local e8=e5/e2*du;local bu=centerX+e7;local bv=centerY+e8;local a3=math.sqrt(e7^2+e8^2)if a3<du then bT[#bT+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',bu,bv)else local dq=math.atan(e8,e7)local e9=centerX+du*math.cos(dq)local ea=centerY+du*math.sin(dq)bT[#bT+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',e9,ea)end;e5=getRelativePitch(-e4)e6=getRelativeYaw(-e4)e7=-e6/e3*du;e8=e5/e2*du;bu=centerX+e7;bv=centerY+e8;a3=math.sqrt(e7^2+e8^2)if not ad then if a3<du then bT[#bT+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',bu,bv)else local dq=math.atan(e8,e7)local e9=centerX+du*math.cos(dq)local ea=centerY+du*math.sin(dq)bT[#bT+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',e9,ea)end end end end;function DrawWarnings(bT)bT[#bT+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)bT[#bT+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then bT[#bT+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))bT[#bT+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))bT[#bT+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local eb=ConvertResolutionX(960)local ec=ConvertResolutionY(860)local ed=ConvertResolutionY(880)local ee=ConvertResolutionY(900)local ef=ConvertResolutionY(960)local eg=ConvertResolutionY(200)local eh=ConvertResolutionY(150)local ei=ConvertResolutionY(960)if o()==1 and not RemoteHud then ec=ConvertResolutionY(135)ed=ConvertResolutionY(155)ee=ConvertResolutionY(175)eg=ConvertResolutionY(115)eh=ConvertResolutionY(95)end;if BrakeIsOn then bT[#bT+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],eb,ec)end;if ad and b3<b6 and b5>brakeLandingRate+5 then bT[#bT+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],eb,eg+50)end;if ah then bT[#bT+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],eb,ei)end;if GearExtended then if A then bT[#bT+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],eb,ed)else bT[#bT+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],eb,ed)end;bT[#bT+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],eb,ee,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if O then bT[#bT+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],eb,ef+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ae-antigrav.getBaseAltitude())<501 then bT[#bT+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singularity Altitude: %d</text>]],eb,eg+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else bT[#bT+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singularity Altitude: %d</text>]],eb,eg+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then bT[#bT+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],eb,eg+20,AutopilotStatus)elseif LockPitch~=nil then bT[#bT+1]=e([[<text class="warn" x="%d" y="%d">Locked Pitch: %d</text>]],eb,eg+20,d(LockPitch))elseif I then bT[#bT+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],eb,eg+20)elseif Reentry then bT[#bT+1]=e([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],eb,eg+20)end;if AltitudeHold then if AutoTakeoff then bT[#bT+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],eb,eg,getDistanceDisplayString(HoldAltitude,0,4000))if BrakeIsOn then bT[#bT+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],eb,eg+50)end else bT[#bT+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],eb,eg,getDistanceDisplayString(HoldAltitude,0,4000))end end;if BrakeLanding then if StrongBrakes then bT[#bT+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],eb,eg)else bT[#bT+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],eb,eg)end end;if ProgradeIsOn then bT[#bT+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],eb,eg)end;if RetrogradeIsOn then bT[#bT+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],eb,eg)end;if TurnBurn then bT[#bT+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],eb,eh)end;if VectorToTarget then bT[#bT+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],eb,eg+30,VectorStatus)end;bT[#bT+1]="</g>"end;function DisplayOrbitScreen(bT)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local ej=OrbitMapX;local ek=OrbitMapY;local el=OrbitMapSize;local em=4;ek=ek+em;local en=15;local bu=ej+el+ej/2+em;local bv=ek+el/2+5+em;local eo,ep,eq,er;eo=el/4;er=0;bT[#bT+1]=[[<g class="pbright txtorb txtmid">]]bT[#bT+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',el+ej*2,el+ek,em,em)if orbit.periapsis~=nil and orbit.apoapsis~=nil then eq=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(eo*2)ep=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/eq*(1-orbit.eccentricity)er=eo-orbit.periapsis.altitude/eq-planet.radius/eq;local es=""if orbit.periapsis.altitude<=0 then es='redout'end;bT[#bT+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],es,ej+el/2+er+em,ek+el/2+em,eo,ep)bT[#bT+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',ej+el/2+em,ek+el/2+em,planet.radius/eq)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then bT[#bT+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bu-35,bv-5,ej+el/2+eo+er,bv-5)bT[#bT+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bu,bv)bv=bv+en;bT[#bT+1]=e([[<text x="%f" y="%f">%s</text>]],bu,bv,getDistanceDisplayString(orbit.apoapsis.altitude))bv=bv+en;bT[#bT+1]=e([[<text x="%f" y="%f">%s</text>]],bu,bv,FormatTimeString(orbit.timeToApoapsis))bv=bv+en;bT[#bT+1]=e([[<text x="%f" y="%f">%s</text>]],bu,bv,getSpeedDisplayString(orbit.apoapsis.speed))end;bv=ek+el/2+5+em;bu=ej-ej/2+10+em;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then bT[#bT+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bu+35,bv-5,ej+el/2-eo+er,bv-5)bT[#bT+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bu,bv)bv=bv+en;bT[#bT+1]=e([[<text x="%f" y="%f">%s</text>]],bu,bv,getDistanceDisplayString(orbit.periapsis.altitude))bv=bv+en;bT[#bT+1]=e([[<text x="%f" y="%f">%s</text>]],bu,bv,FormatTimeString(orbit.timeToPeriapsis))bv=bv+en;bT[#bT+1]=e([[<text x="%f" y="%f">%s</text>]],bu,bv,getSpeedDisplayString(orbit.periapsis.speed))end;bT[#bT+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],ej+el/2+em,20+em,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local et=orbit.timeToApoapsis/orbit.period*2*math.pi;local eu=eo*math.cos(et)local ev=ep*math.sin(et)bT[#bT+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',ej+el/2+eu+er+em,ek+el/2+ev+em)end;bT[#bT+1]=[[</g>]]end end;function getDistanceDisplayString(a3,ew,ex)a3=a3 or 0;local ey=a3>100000;ex=ex or 1000;if ex<1000 or ex>10000 then ex=1000 end;ew=ew or 2;if ew<0 or ew>3 then ew=0 end;if ey then return round(a3/1000/200,ew).." SU"elseif a3<ex then return string.format("%d",round(a3)).." M"else return round(a3/1000,ew).." KM"end end;function getSpeedDisplayString(bo)return d(round(bo*3.6,0)+0.5).." km/h"end;function FormatTimeString(ez)local eA=0;local eB=0;local eC=0;if ez<60 then ez=d(ez)elseif ez<3600 then eA=d(ez/60)ez=d(ez%60)elseif ez<86400 then eB=d(ez/3600)eA=d(ez%3600/60)else eC=d(ez/86400)eB=d(ez%86400/3600)end;if eC>0 then return eC.."d "..eB.."h "elseif eB>0 then return eB.."h "..eA.."m "elseif eA>0 then return eA.."m "..ez.."s"elseif ez>0 then return ez.."s"else return"0s"end end;function getMagnitudeInDirection(cK,eD)cK=vec3(cK)eD=vec3(eD):normalize()local bd=cK*eD;return bd.x+bd.y+bd.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"V=nil;return true end;local eE=AtlasOrdered[AutopilotTargetIndex].index;local eF=aS[0][eE]if eF.center then AutopilotTargetName=eF.name;V=aY[0][eE]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=eF;for _,bc in pairs(aY[0])do if bc.name==CustomTarget.planetname then V=bc;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(V.center)else AutopilotTargetCoords=CustomTarget.position end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=a_(V):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local eG=LastMaxBrakeInAtmo/V:getGravity(V.center+vec3(0,0,1)*V.radius):len()return eG end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(V.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local b4=core.getWorldVelocity()local bo=vec3(b4):len()local eH,eI=aZ.computeDistanceAndTime(vec3(b4):len(),MaxGameVelocity,n(),Nav:maxForceForward(),warmup,0)local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,eJ;if not TurnBurn then _,eJ=GetAutopilotBrakeDistanceAndTime(bo)else _,eJ=GetAutopilotTBBrakeDistanceAndTime(bo)end;local eK=0;local eL=0;if AutopilotCruising or not Autopilot and bo>5 then eL=aZ.computeTravelTime(bo,0,AutopilotDistance)elseif P+eH<AutopilotDistance then eK=AutopilotDistance-(P+eH)eL=aZ.computeTravelTime(8333.0556,0,eK)else local eM=(AutopilotDistance-P)/eH;eH=AutopilotDistance-P;eI=eI*eM end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return eL elseif AutopilotBraking then return eJ elseif AutopilotCruising then return eL+eJ else return eI+Q+eL end end;function GetAutopilotBrakeDistanceAndTime(bo)if not ad then RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bo,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aZ.computeDistanceAndTime(bo,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bo)RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bo,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local eN=-1;local eO=-1;if vBooster then eN=vBooster.distance()end;if hover then eO=hover.distance()end;if eN~=-1 and eO~=-1 then if eN<eO then return eN else return eO end elseif eN~=-1 then return eN elseif eO~=-1 then return eO else return-1 end end;function AboveGroundLevel()local eP=-1;local eQ=aa;if telemeter_1 then eP=telemeter_1.getDistance()end;if eQ~=-1 and eP~=-1 then if eQ<eP then return eQ else return eP end elseif eQ~=-1 then return eQ else return eP end end;function tablelength(eR)local eS=0;for _ in pairs(eR)do eS=eS+1 end;return eS end;function BeginProfile(eT)ProfileTimeStart=system.getTime()end;function EndProfile(eT)local eU=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+eU;ProfileCount=ProfileCount+1;if eU>ProfileTimeMax then ProfileTimeMax=eU end;if eU<ProfileTimeMin then ProfileTimeMin=eU end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local eV=ProfileTimeSum;local eW=ProfileTimeSum/ProfileCount;local eX=ProfileTimeMin;local eY=ProfileTimeMax;local eZ=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",eV,eW,eX,eY,eZ))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local e_=radar_1.getEntries()local f0=radar_1.getData()local f1=ConvertResolutionX(1770)local f2=ConvertResolutionY(330)if#e_>0 then local f3=f0:find('identifiedConstructs":%[%]')if f3==nil and perisPanelID==nil then a6=1;ToggleRadarPanel()end;if f3~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;a4=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],f1,f2,#e_)local f4={}for bb,bc in pairs(e_)do if radar_1.hasMatchingTransponder(bc)==1 then table.insert(f4,bc)end end;if#f4>0 then local bv=ConvertResolutionY(15)local bu=ConvertResolutionX(1370)a4=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],a4,bu,bv)for bb,bc in pairs(f4)do bv=bv+20;a4=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],a4,bu,bv,radar_1.getConstructName(bc))end end else local f5;f5=f0:find('worksInEnvironment":false')if f5 then a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],f1,f2)else a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],f1,f2)end;if radarPanelID~=nil then a6=0;ToggleRadarPanel()end end end end;function DisplayMessage(bT,f6)if f6~="empty"then bT[#bT+1]=[[<text class="msg" x="50%%" y="310" >]]for f7 in string.gmatch(f6,"([^\n]+)")do bT[#bT+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],f7)end;bT[#bT+1]=[[</text>]]end;if a2~=0 then unit.setTimer("msgTick",a2)a2=0 end end;function updateDistance()local bj=system.getTime()local b4=vec3(core.getWorldVelocity())local d3=vec3(b4):len()local f8=bj-ag;if d3>1.38889 then d3=d3/1000;local f9=d3*(bj-ag)TotalDistanceTravelled=TotalDistanceTravelled+f9;W=W+f9 end;X=X+f8;TotalFlightTime=TotalFlightTime+f8;ag=bj end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,atmos=false,gravity=0},[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;function SetupAtlas()aS=Atlas()for bb,bc in pairs(aS[0])do if av==nil or bc.center.x<av then av=bc.center.x end;if aw==nil or bc.center.x>aw then aw=bc.center.x end;if ax==nil or bc.center.y<ax then ax=bc.center.y end;if ay==nil or bc.center.y>ay then ay=bc.center.y end end;aT=""local fa=1.1*(aw-av)/1920;local fb=1.4*(ay-ax)/1080;for bb,bc in pairs(aS[0])do local bu=960+bc.center.x/fa;local bv=540+bc.center.y/fb;aT=aT..'<circle cx="'..bu..'" cy="'..bv..'" r="'..bc.radius/fa*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bc.name,"Moon")and not string.match(bc.name,"Sanctuary")and not string.match(bc.name,"Space")then aT=aT.."<text x='"..bu.."' y='"..bv+bc.radius/fa*30+20 .."' font-size='28' fill="..aj.." text-anchor='middle' font-family='Montserrat'>"..bc.name.."</text>"end end;local bD=vec3(core.getConstructWorldPos())local bu=960+bD.x/fa;local bv=540+bD.y/fb;aT=aT..'<circle cx="'..bu..'" cy="'..bv..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='"..bu.."' y='"..bv-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aT=aT..[[</svg>]]aU=fa;aV=fb;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aT)local bD=vec3(core.getConstructWorldPos())local bu=960+bD.x/fa;local bv=540+bD.y/fb;aT='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='80' y='105' font-size='18' fill="..aj.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"aW=screen_2.addContent((bu-80)/19.20,(bv-80)/10.80,aT)end end;function PlanetRef()local function fc(fd)return type(fd)=='number'end;local function fe(fd)return type(tonumber(fd))=='number'end;local function ff(fg)return type(fg)=='table'end;local function fh(fi)return type(fi)=='string'end;local function fj(bc)return ff(bc)and fc(bc.x and bc.y and bc.z)end;local function fk(fl)return ff(fl)and fc(fl.latitude and fl.longitude and fl.altitude and fl.bodyId and fl.systemId)end;local fm=math.pi/180;local fn=180/math.pi;local fo=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bE='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local fp=utils.clamp;local function fq(fr,fs)if fr==0 then return math.abs(fs)<1e-09 end;if fs==0 then return math.abs(fr)<1e-09 end;return math.abs(fr-fs)<math.max(math.abs(fr),math.abs(fs))*fo end;local function ft(fd)local bd=string.gsub(string.reverse(e('%.4f',fd)),'^0*%.?','')return bd==''and'0'or string.reverse(bd)end;local function fu(fv)if fj(fv)then return e('{x=%.3f,y=%.3f,z=%.3f}',fv.x,fv.y,fv.z)end;if ff(fv)and not getmetatable(fv)then local fw={}local fx=next(fv)if type(fx)=='nil'or fx==1 then fw=fv else for bb,bc in pairs(fv)do local dm=fu(bc)if type(bb)=='number'then table.insert(fw,e('[%s]=%s',bb,dm))else table.insert(fw,e('%s=%s',bb,dm))end end end;return e('{%s}',table.concat(fw,','))end;if fh(fv)then return e("'%s'",fv:gsub("'",[[\']]))end;return tostring(fv)end;local fy={}fy.__index=fy;fy.__tostring=function(fv,fz)local fA={}for bb in pairs(fv)do table.insert(fA,bb)end;table.sort(fA)local fw={}for _,bb in ipairs(fA)do local dm=fu(fv[bb])if type(bb)=='number'then table.insert(fw,e('[%s]=%s',bb,dm))else table.insert(fw,e('%s=%s',bb,dm))end end;if fz then return e('%s%s',fz,table.concat(fw,',\n'..fz))end;return e('{%s}',table.concat(fw,','))end;fy.__eq=function(fB,fC)return fB.planetarySystemId==fC.planetarySystemId and fB.bodyId==fC.bodyId and fq(fB.radius,fC.radius)and fq(fB.center.x,fC.center.x)and fq(fB.center.y,fC.center.y)and fq(fB.center.z,fC.center.z)and fq(fB.GM,fC.GM)end;local function fD(bF,bG,fE,fF,fG)assert(fe(bF),'Argument 1 (planetarySystemId) must be a number:'..type(bF))assert(fe(bG),'Argument 2 (bodyId) must be a number:'..type(bG))assert(fe(fE),'Argument 3 (radius) must be a number:'..type(fE))assert(ff(fF),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(fF))assert(fe(fG),'Argument 5 (GM) must be a number:'..type(fG))return setmetatable({planetarySystemId=tonumber(bF),bodyId=tonumber(bG),radius=tonumber(fE),center=vec3(fF),GM=tonumber(fG)},fy)end;local fH={}fH.__index=fH;fH.__tostring=function(fI)return e('::pos{%d,%d,%s,%s,%s}',fI.systemId,fI.bodyId,ft(fI.latitude*fn),ft(fI.longitude*fn),ft(fI.altitude))end;fH.__eq=function(fB,fC)return fB.bodyId==fC.bodyId and fB.systemId==fC.systemId and fq(fB.latitude,fC.latitude)and fq(fB.altitude,fC.altitude)and(fq(fB.longitude,fC.longitude)or fq(fB.latitude,math.pi/2)or fq(fB.latitude,-math.pi/2))end;local function fJ(fK,bG,bH,bI,altitude)local bF=fK;if fh(fK)and not bI and not altitude and not bG and not bH then bF,bG,bH,bI,altitude=string.match(fK,bE)assert(bF,'Argument 1 (position string) is malformed.')else assert(fe(bF),'Argument 1 (systemId) must be a number:'..type(bF))assert(fe(bG),'Argument 2 (bodyId) must be a number:'..type(bG))assert(fe(bH),'Argument 3 (latitude) must be in degrees:'..type(bH))assert(fe(bI),'Argument 4 (longitude) must be in degrees:'..type(bI))assert(fe(altitude),'Argument 5 (altitude) must be in meters:'..type(altitude))end;bF=tonumber(bF)bG=tonumber(bG)bH=tonumber(bH)bI=tonumber(bI)altitude=tonumber(altitude)if bG==0 then return setmetatable({latitude=bH,longitude=bI,altitude=altitude,bodyId=bG,systemId=bF},fH)end;return setmetatable({latitude=fm*fp(bH,-90,90),longitude=fm*(bI%360),altitude=altitude,bodyId=bG,systemId=bF},fH)end;local fL={}fL.__index=fL;fL.__tostring=function(fv,fz)local fM=fz and fz..'  'local fN={}local fA={}for bb in pairs(fv)do table.insert(fA,bb)end;table.sort(fA)for _,fO in ipairs(fA)do bdy=fv[fO]local fP=fy.__tostring(bdy,fM)if fz then table.insert(fN,e('[%s]={\n%s\n%s}',fO,fP,fz))else table.insert(fN,e('  [%s]=%s',fO,fP))end end;if fz then return e('\n%s%s%s',fz,table.concat(fN,',\n'..fz),fz)end;return e('{\n%s\n}',table.concat(fN,',\n'))end;local function fQ(fR)local aS={}local pid;for _,bc in pairs(fR)do local bP=bc.planetarySystemId;if type(bP)~='number'then error('Invalid planetary system ID: '..tostring(bP))elseif pid and bP~=pid then error('Mismatch planetary system IDs: '..bP..' and '..pid)end;local fS=bc.bodyId;if type(fS)~='number'then error('Invalid body ID: '..tostring(fS))elseif aS[fS]then error('Duplicate body ID: '..tostring(fS))end;setmetatable(bc.center,getmetatable(vec3.unit_x))aS[fS]=setmetatable(bc,fy)pid=bP end;return setmetatable(aS,fL)end;aX={}local function fT(fR)return setmetatable({galaxyAtlas=fR or{}},aX)end;aX.__index=function(fg,i)if type(i)=='number'then local system=fg.galaxyAtlas[i]return fQ(system)end;return rawget(aX,i)end;aX.__pairs=function(fv)return function(fg,bb)local fU,nv=next(fg,bb)return fU,nv and fQ(nv)end,fv.galaxyAtlas,nil end;aX.__tostring=function(fv)local fV={}for _,fW in pairs(fv or{})do local fX=fW:getPlanetarySystemId()local fY=fL.__tostring(fW,'    ')table.insert(fV,e('  [%s]={%s\n  }',fX,fY))end;return e('{\n%s\n}\n',table.concat(fV,',\n'))end;aX.BodyParameters=fD;aX.MapPosition=fJ;aX.PlanetarySystem=fQ;function aX.createBodyParameters(fZ,bG,f_,g0,g1,g2,g3)assert(fe(fZ),'Argument 1 (planetarySystemId) must be a number:'..type(fZ))assert(fe(bG),'Argument 2 (bodyId) must be a number:'..type(bG))assert(fe(f_),'Argument 3 (surfaceArea) must be a number:'..type(f_))assert(ff(g0),'Argument 4 (aPosition) must be an array or vec3:'..type(g0))assert(ff(g1),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(g1))assert(fe(g2),'Argument 6 (altitude) must be in meters:'..type(g2))assert(fe(g3),'Argument 7 (gravityAtPosition) must be number:'..type(g3))local fE=math.sqrt(f_/4/math.pi)local a3=fE+g2;local g4=vec3(g0)+a3*vec3(g1)local fG=g3*a3*a3;return fD(fZ,bG,fE,g4,fG)end;aX.isMapPosition=fk;function aX:getPlanetarySystem(fK)if i==nil then i=0 end;if nv==nil then nv=0 end;local fZ=fK;if fk(fK)then fZ=fK.systemId end;if type(fZ)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=fL then system=fQ(system)end;return system end end end;function fL:castIntersections(g5,eD,g6,g7)local g6=g6 or function(g8)return 1.05*g8.radius end;local g9={}if g7 then for _,i in ipairs(g7)do g9[i]=self[i]end else g7={}for bb,g8 in pairs(self)do table.insert(g7,bb)g9[bb]=g8 end end;local function ga(gb,gc)local gd=g9[gb].center-g5;local ge=g9[gc].center-g5;return gd:len()<ge:len()end;table.sort(g7,ga)local gf=eD:normalize()for i,bP in ipairs(g7)do local g8=g9[bP]local gg=g8.center-g5;local fE=g6(g8)local gh=gg:dot(gf)local gi=gh^2-(gg:len2()-fE^2)if gi>=0 then local gj=math.sqrt(gi)local gk=gh+gj;local gl=gh-gj;if gl>0 then return g8,gk,gl elseif gk>0 then return g8,gk,nil end end end;return nil,nil,nil end;function fL:closestBody(gm)assert(type(gm)=='table','Invalid coordinates.')local gn,g8;local go=vec3(gm)for _,gp in pairs(self)do local gq=(gp.center-go):len2()if not g8 or gq<gn then g8=gp;gn=gq end end;return g8 end;function fL:convertToBodyIdAndWorldCoordinates(fK)local gr=fK;if fh(fK)then gr=fJ(fK)end;if gr.bodyId==0 then return 0,vec3(gr.latitude,gr.longitude,gr.altitude)end;local gp=self:getBodyParameters(gr)if gp then return gr.bodyId,gp:convertToWorldCoordinates(gr)end end;function fL:getBodyParameters(fK)local bG=fK;if fk(fK)then bG=fK.bodyId end;assert(fe(bG),'Argument 1 (bodyId) must be a number:'..type(bG))return self[bG]end;function fL:getPlanetarySystemId()local _,bc=next(self)return bc and bc.planetarySystemId end;function fy:convertToMapPosition(fF)assert(ff(fF),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(fF))local gs=vec3(fF)if self.bodyId==0 then return setmetatable({latitude=gs.x,longitude=gs.y,altitude=gs.z,bodyId=0,systemId=self.planetarySystemId},fH)end;local gt=gs-self.center;local a3=gt:len()local altitude=a3-self.radius;local bH=0;local bI=0;if not fq(a3,0)then local gu=math.atan(gt.y,gt.x)bI=gu>=0 and gu or 2*math.pi+gu;bH=math.pi/2-math.acos(gt.z/a3)end;return setmetatable({latitude=bH,longitude=bI,altitude=altitude,bodyId=self.bodyId,systemId=self.planetarySystemId},fH)end;function fy:convertToWorldCoordinates(fK)local gr=fh(fK)and fJ(fK)or fK;if gr.bodyId==0 then return vec3(gr.latitude,gr.longitude,gr.altitude)end;assert(fk(gr),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(gr.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(gr.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local bJ=math.cos(gr.latitude)return self.center+(self.radius+gr.altitude)*vec3(bJ*math.cos(gr.longitude),bJ*math.sin(gr.longitude),math.sin(gr.latitude))end;function fy:getAltitude(fF)return(vec3(fF)-self.center):len()-self.radius end;function fy:getDistance(fF)return(vec3(fF)-self.center):len()end;function fy:getGravity(fF)local gv=self.center-vec3(fF)local gw=gv:len2()return self.GM/gw*gv/math.sqrt(gw)end;return setmetatable(aX,{__call=function(_,...)return fT(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function fh(fi)return type(fi)=='string'end;local function ff(fg)return type(fg)=='table'end;local function fq(fr,fs)if fr==0 then return math.abs(fs)<1e-09 end;if fs==0 then return math.abs(fr)<1e-09 end;return math.abs(fr-fs)<math.max(math.abs(fr),math.abs(fs))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(altitude)assert(self.body)local a3=altitude+self.body.radius;if not fq(a3,0)then local orbit=math.sqrt(self.body.GM/a3)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(fK,b4)assert(self.body)assert(ff(fK)or fh(fK))assert(ff(b4))local bD=(fh(fK)or PlanetRef.isMapPosition(fK))and self.body:convertToWorldCoordinates(fK)or vec3(fK)local bc=vec3(b4)local gx=bD-self.body.center;local ge=bc:len2()local gy=gx:len()local gz=self.body.GM;local gA=((ge-gz/gy)*gx-gx:dot(bc)*bc)/gz;local fr=gz/(2*gz/gy-ge)local gB=gA:len()local gf=gA:normalize()local gC=fr*(1-gB)local gD=fr*(1+gB)local gE=gC*gf+self.body.center;local gF=gB<=1 and-gD*gf+self.body.center or nil;local gG=math.sqrt(fr*gz*(1-gB*gB))local gH=gF and 2*math.pi*math.sqrt(fr^3/gz)local gI=math.acos(gA:dot(gx)/(gB*gy))if gx:dot(bc)<0 then gI=-(gI-2*math.pi)end;local gJ=math.acos((math.cos(gI)+gB)/(1+gB*math.cos(gI)))local gK=gJ;if gK<0 then gK=gK+2*math.pi end;local gL=gK-gB*math.sin(gK)local gM=0;local gN=0;local gO=0;if gH~=nil then gM=gL/(2*math.pi/gH)gN=gH-gM;gO=gN+gH/2;if gI-math.pi>0 then gN=gM;gO=gN+gH/2 end;if gO>gH then gO=gO-gH end end;return{periapsis={position=gE,speed=gG/gC,circularOrbitSpeed=math.sqrt(gz/gC),altitude=gC-self.body.radius},apoapsis=gF and{position=gF,speed=gG/gD,circularOrbitSpeed=math.sqrt(gz/gD),altitude=gD-self.body.radius},currentVelocity=bc,currentPosition=bD,eccentricity=gB,period=gH,eccentricAnomaly=gJ,meanAnomaly=gL,timeToPeriapsis=gN,timeToApoapsis=gO}end;local function gP(gQ)local gp=PlanetRef.BodyParameters(gQ.planetarySystemId,gQ.bodyId,gQ.radius,gQ.center,gQ.GM)return setmetatable({body=gp},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return gP(...)end})end;function Kinematics()local aZ={}local gR=30000000/3600;local gS=gR*gR;local gT=100;local function gU(bc)return 1/math.sqrt(1-bc*bc/gS)end;function aZ.computeAccelerationTime(gV,gW,gX)local gY=gR*math.asin(gV/gR)return(gR*math.asin(gX/gR)-gY)/gW end;function aZ.computeDistanceAndTime(gV,gX,gZ,g_,h0,h1)h0=h0 or 0;h1=h1 or 0;local h2=gV<=gX;local h3=g_*(h2 and 1 or-1)/gZ;local h4=-h1/gZ;local h5=h3+h4;if h2 and h5<=0 or not h2 and h5>=0 then return-1,-1 end;local h6,h7=0,0;if h3~=0 and h0>0 then local gY=math.asin(gV/gR)local h8=math.pi*(h3/2+h4)local h9=h3*h0;local ha=gR*math.pi;local bc=function(fg)local ce=(h8*fg-h9*math.sin(math.pi*fg/2/h0)+ha*gY)/ha;local hb=math.tan(ce)return gR*hb/math.sqrt(hb*hb+1)end;local hc=h2 and function(fi)return fi>=gX end or function(fi)return fi<=gX end;h7=2*h0;if hc(bc(h7))then local hd=0;while math.abs(h7-hd)>0.5 do local fg=(h7+hd)/2;if hc(bc(fg))then h7=fg else hd=fg end end end;local he=gV;local hf=h7/gT;for hg=1,gT do local bo=bc(hg*hf)h6=h6+(bo+he)*hf/2;he=bo end;if h7<2*h0 then return h6,h7 end;gV=he end;local gY=gR*math.asin(gV/gR)local be=(gR*math.asin(gX/gR)-gY)/h5;local hh=gS*math.cos(gY/gR)/h5;local a3=hh-gS*math.cos((h5*be+gY)/gR)/h5;return a3+h6,be+h7 end;function aZ.computeTravelTime(gV,gW,a3)if a3==0 then return 0 end;if gW>0 then local gY=gR*math.asin(gV/gR)local hh=gS*math.cos(gY/gR)/gW;return(gR*math.acos(gW*(hh-a3)/gS)-gY)/gW end;assert(gV>0,'Acceleration and initial speed are both zero.')return a3/gV end;function aZ.lorentz(bc)return gU(bc)end;return aZ end;function script.onStart()VERSION_NUMBER=4.926;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()aX=PlanetRef()aY=aX(Atlas())aZ=Kinematics()a_=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bN=j()if door and(bN>0 or bN==0 and ae<10000)then for _,bc in pairs(door)do bc.toggle()end end;if switch then for _,bc in pairs(switch)do bc.toggle()end end;if forcefield and(bN>0 or bN==0 and ae<10000)then for _,bc in pairs(forcefield)do bc.toggle()end end;if dbHud_1 then if not Y then for bb,bc in pairs(b)do dbHud_1.setStringValue(bc,g(_G[bc]))end;for bb,bc in pairs(a)do dbHud_1.setStringValue(bc,g(_G[bc]))end;c("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(hi)if hi=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local hj=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if hj then a3=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else a3=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b5)R,S=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b5)R,S=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(a3)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..getDistanceDisplayString(P)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(Q)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..getDistanceDisplayString(R)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(S)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif hi=="oneSecond"then ab=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local bT={}local cU=GetFlightStyle()DrawOdometer(bT,W,TotalDistanceTravelled,cU,X)CheckDamage(bT)a5=table.concat(bT,"")collectgarbage("collect")elseif hi=="fiveSecond"then if not dbHud_1 then return end;ac=dbHud_1.getStringValue("SPBAutopilotTargetName")if ac~=nil and ac~=""and ac~="SatNavNotChanged"then local bd=json.decode(dbHud_1.getStringValue("SavedLocations"))if bd~=nil then _G["SavedLocations"]=bd;local bR=-1;local bM;for bb,bc in pairs(SavedLocations)do if bc.name and bc.name=="SatNav Location"then bR=bb;break end end;if bR~=-1 then bM=SavedLocations[bR]bR=-1;for bb,bc in pairs(aS[0])do if bc.name and bc.name=="SatNav Location"then bR=bb;break end end;if bR>-1 then aS[0][bR]=bM end;UpdateAtlasLocationsList()K=bM.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ac then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif hi=="msgTick"then local bT={}DisplayMessage(bT,"empty")K="empty"unit.stopTimer("msgTick")a2=3 elseif hi=="animateTick"then b1=true;b0=false;a0=0;a1=0;unit.stopTimer("animateTick")elseif hi=="hudTick"then local b8=system.getMouseDeltaX()local b9=system.getMouseDeltaY()local bT={}HUDPrologue(bT)if showHud then UpdateHud(bT)else DisplayOrbitScreen(bT)DrawWarnings(bT)end;HUDEpilogue(bT)bT[#bT+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0" viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if K~="empty"then DisplayMessage(bT,K)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(bT)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(bT)if screen_1.getMouseState()==1 then CheckButtons()end;bT[#bT+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)elseif system.isViewLocked()==0 then if o()==1 and J then SetButtonContains()DrawButtons(bT)if not b0 and not b1 then local hk=table.concat(bT,"")bT={}bT[#bT+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bT[#bT+1]=aT;bT[#bT+1]=hk;bT[#bT+1]="</body>"b0=true;bT[#bT+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(bT,"")system.setScreen(content)elseif b1 then local hk=table.concat(bT,"")bT={}bT[#bT+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bT[#bT+1]=aT;bT[#bT+1]=hk;bT[#bT+1]="</body>"end;if not b0 then bT[#bT+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end else CheckButtons()end else if not J and o()==0 then CheckButtons()if a3>DeadZone then DrawCursorLine(bT)end else SetButtonContains()DrawButtons(bT)end;bT[#bT+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end;bT[#bT+1]=[[</svg></body>]]content=table.concat(bT,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif hi=="apTick"then b3=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ad=j()>0;b8=system.getMouseDeltaX()b9=system.getMouseDeltaY()if InvertMouse and not J then b9=-b9 end;D=0;H=0;C=0;b4=vec3(core.getWorldVelocity())b5=vec3(b4):len()sys=aY[0]planet=sys:closestBody(core.getConstructWorldPos())if planet.name=="Space"then planet=aS[0][2]end;kepPlanet=a_(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),b4)aa=hoverDetectGround()if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a0=screen_1.getMouseX()*ResolutionX;a1=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and J then if not b0 then a0=a0+b8;a1=a1+b9 end else a0=0;a1=0 end else a0=a0+b8;a1=a1+b9;a3=math.sqrt(a0*a0+a1*a1)if not J and o()==0 then if userControlScheme=="virtual joystick"then if a0>0 and a0>DeadZone then D=D-(a0-DeadZone)*MouseXSensitivity elseif a0<0 and a0<DeadZone*-1 then D=D-(a0+DeadZone)*MouseXSensitivity else D=0 end;if a1>0 and a1>DeadZone then C=C-(a1-DeadZone)*MouseYSensitivity elseif a1<0 and a1<DeadZone*-1 then C=C-(a1+DeadZone)*MouseYSensitivity else C=0 end elseif userControlScheme=="mouse"then a0=0;a1=0;C=(-utils.smoothstep(b9,-100,100)+0.5)*2*y;D=(-utils.smoothstep(b8,-100,100)+0.5)*2*z else a0=0;a1=0 end end end;local hl=b5>8334;if b5>SpaceSpeedLimit/3.6 and not ad and not Autopilot and not hl then K="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if not hl and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=hl;ae=core.getAltitude()if ae==0 then ae=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if not AtmoSpeedLimitIsOff and ae<=8000 then if not ai then if b5>AtmoSpeedLimit/3.6 then BrakeIsOn=true;ai=true end else if b5<AtmoSpeedLimit/3.6 then BrakeIsOn=false;ai=false end end elseif ai then ai=false;BrakeIsOn=false end;if BrakeIsOn then G=1 else G=0 end;if ProgradeIsOn then if b5>w then local hm=AlignToWorldVector(vec3(b4),0.01)if a7 then b2=true;if b5<ReentrySpeed/3.6 then BrakeIsOn=false;ProgradeIsOn=false;x=true;a7=false;a9=true;Autopilot=false;b2=autoRollPreference;BeginReentry()else BrakeIsOn=true end end end end;if RetrogradeIsOn then if ad then RetrogradeIsOn=false elseif b5>w then AlignToWorldVector(-vec3(b4))end end;if not ProgradeIsOn and a7 then if j()==0 then x=true;BeginReentry()a7=false;a9=true else a7=false;ToggleAutopilot()end end;if a9 and ae<ReentryAltitude+100 and b5*3.6>ReentrySpeed-100 then ToggleAutopilot()a9=false end;if Autopilot and j()==0 and not a7 then local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b5)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b5)end;P=P;Q=Q;local hn=AutopilotTargetCoords;if orbit.apoapsis==nil and b5>300 and AutopilotAccelerating then local ho=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(b4):normalize()local hp=getMagnitudeInDirection(ho,AutopilotShipUp)local hq=getMagnitudeInDirection(ho,AutopilotShipRight)local hr=-hq*AutopilotDistance*b5*TrajectoryAlignmentStrength;local hs=-hp*AutopilotDistance*b5*TrajectoryAlignmentStrength;hn=AutopilotTargetCoords+-hr*vec3(AutopilotShipRight)+-hs*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(hn)-vec3(core.getConstructWorldPos())):len()local ht=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(ht)..'", "unit":""}')local hu=true;local hv=(V.center-(vec3(core.getConstructWorldPos())+vec3(b4):normalize()*AutopilotDistance)):len()-V.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(hv)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then hu=AlignToWorldVector((hn-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then hu=AlignToWorldVector(-vec3(b4):normalize())end;if AutopilotAccelerating then if not hu or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(b4)<0 and b5>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false elseif not u then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(hv-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and u then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end;if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end elseif AutopilotBraking then BrakeIsOn=true;G=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and b5<50 then K="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"elseif(CustomTarget==nil or CustomTarget~=nil and CustomTarget.planetname~="Space")and orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>L or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"K="Autopilot completed, orbit established"G=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;a7=true end end end elseif AutopilotCruising then if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if hu then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not a7 then AutopilotTargetCoords=vec3(V.center)+(AutopilotTargetOrbit+V.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif hu then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not u then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true;BrakeIsOn=false end end end end end;if I then b2=true;local hw=0;local bD=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local hx=bD-vec3(core.getConstructWorldPos())local hy=vec3(hx):project_on(vec3(core.getConstructWorldOrientationForward())):len()local hz=vec3(hx):project_on(vec3(core.getConstructWorldOrientationRight())):len()local a3=math.sqrt(hy*hy+hz*hz)AlignToWorldVector(hx:normalize())local hA=40;local hB=a3<hA;local hC=100;local hD=utils.clamp((a3-hA)/2,10,hC)C=0;local hu=math.abs(D)<0.1;if hu and b5<hD and not hB then BrakeIsOn=false;hw=-20 else BrakeIsOn=true;hw=0 end;local bW=vec3(core.getConstructWorldOrientationForward())local bX=vec3(core.getConstructWorldOrientationRight())local bY=vec3(core.getWorldVertical())local bZ=getPitch(bY,bW,bX)local hE=1.0;if math.abs(hw-bZ)>hE then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(hw-bZ)local hF=pitchPID:get()C=hF end end;local dr=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local d6=unit.getClosestPlanetInfluence()>0;local hG=HoldAltitude-ae;local hH=500+b5;local hw=0;if AggAltHoldLockable()then local hI=antigrav.getBaseAltitude()hG=hI-(altitude+15)hH=500+b5*1.3;hw=(utils.smoothstep(hG,-hH,hH)-0.5)*2.2*MaxPitch elseif AltitudeHold then hw=(utils.smoothstep(hG,-hH,hH)-0.5)*2*MaxPitch end;if LockPitch~=nil then if d6 then hw=LockPitch else LockPitch=nil end end;b2=true;if Reentry then local hJ=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=hJ then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,hJ)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not x then hw=-80;if j()>0.02 then K="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;hw=0;b2=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then x=false;Reentry=false;b2=autoRollPreference end end;local hK=C;if b5>w and not a8 then AlignToWorldVector(vec3(b4))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local cM=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(cM)local hL=cM:len()-cM:project_on(dr):len()local bp=LastMaxBrakeInAtmo;local dp=b4.x*dr.x+b4.y*dr.y+b4.z*dr.z;local hM=b4:len()-math.abs(dp)local hN=vec3(core.getWorldAirFrictionAcceleration())if bp~=nil then P,Q=aZ.computeDistanceAndTime(hM,0,n(),0,0,bp+(hN:len()-hN:project_on(dr):len())*n())else P,Q=aZ.computeDistanceAndTime(hM,0,n(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*n())end;StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if hL<=P then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and hL>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=hL end;C=hK;local bW=vec3(core.getConstructWorldOrientationForward())local bX=vec3(core.getConstructWorldOrientationRight())local bY=vec3(core.getWorldVertical())local eP=-1;local bZ=getPitch(bY,bW,bX)local hE=0.1;if BrakeLanding then hw=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local dp=b4.x*dr.x+b4.y*dr.y+b4.z*dr.z;eP=aa;if eP>-1 then if math.abs(hw-bZ)<hE then b2=autoRollPreference;if b5<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)Z=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and b4:normalize():dot(-dr)<0.99 then BrakeIsOn=true elseif dp<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff or a8 then if hw<15 then AutoTakeoff=false;if not a8 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end elseif a8 and b5<w then Autopilot=true;a8=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)elseif a8 then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)BrakeIsOn=true end elseif a8 and j()==0 and ae>75000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=1500 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,1500)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;if math.abs(hw-bZ)>hE then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(hw-bZ)local hF=pitchPID:get()C=C+hF end end;L=orbit.eccentricity;if antigrav and not ExternalAGG and ae<200000 then if AntigravTargetAltitude==nil then AntigravTargetAltitude=1000 end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then if not AntigravTargetAltitude or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;pitchSpeedFactor=math.max(pitchSpeedFactor or 0.01,0.01)yawSpeedFactor=math.max(yawSpeedFactor or 0.01,0.01)rollSpeedFactor=math.max(rollSpeedFactor or 0.01,0.01)torqueFactor=math.max(torqueFactor or 0.01,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor or 0.01,0.01)brakeFlatFactor=math.max(brakeFlatFactor or 0.01,0.01)autoRollFactor=math.max(autoRollFactor or 0.01,0.01)turnAssistFactor=math.max(turnAssistFactor or 0.01,0.01)local hO=utils.clamp(B+C+system.getControlDeviceForwardInput(),-1,1)local hP=utils.clamp(E+H+system.getControlDeviceYawInput(),-1,1)local hQ=utils.clamp(F+D-system.getControlDeviceLeftRightInput(),-1,1)local hR=G;local hS=vec3(core.getWorldVertical())local hT=vec3(core.getConstructWorldOrientationUp())local hU=vec3(core.getConstructWorldOrientationForward())local hV=vec3(core.getConstructWorldOrientationRight())local hW=vec3(core.getWorldVelocity())local hX=vec3(core.getWorldVelocity()):normalize()local hY=getRoll(hS,hU,hV)local hZ=math.abs(hY)local h_=utils.sign(hY)local j=j()local i0=vec3(core.getWorldAngularVelocity())local i1=hO*pitchSpeedFactor*hV+hP*rollSpeedFactor*hU+hQ*yawSpeedFactor*hT;if hS:len()>0.01 and j>0.0 or ProgradeIsOn then local i2=1.0;if b2==true and hZ>i2 and hP==0 then local i3=utils.clamp(0,hZ-30,hZ+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(i3-hY)local i4=rollPID:get()i1=i1+i4*hU end end;if hS:len()>0.01 and j>0.0 then local i5=20.0;if turnAssist==true and hZ>i5 and hO==0 and hQ==0 then local i6=turnAssistFactor*0.1;local i7=turnAssistFactor*0.025;local i8=(hZ-i5)/(180-i5)*180;local i9=0;if i8<90 then i9=i8/90 elseif i8<180 then i9=(180-i8)/90 end;i9=i9*i9;local ia=-h_*i7*(1.0-i9)local ib=i6*i9;i1=i1+ib*hV+ia*hT end end;local ic=1;local id=0;local ie=1;local ig=torqueFactor*(i1-i0)local ih=vec3(core.getWorldAirFrictionAngularAcceleration())ig=ig-ih;Nav:setEngineTorqueCommand('torque',ig,ic,'airfoil','','',ie)local ii=-hR*(brakeSpeedFactor*hW+brakeFlatFactor*hX)Nav:setEngineForceCommand('brake',ii)local ij=''local ik=vec3()local il=false;local im='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then im=im..ExtraLongitudeTags end;local io=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if io==axisCommandType.byThrottle then local ip=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(im,axisCommandId.longitudinal)Nav:setEngineForceCommand(im,ip,ic)elseif io==axisCommandType.byTargetSpeed then local ip=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)ij=ij..' , '..im;ik=ik+ip;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then il=true end end;local iq='thrust analog lateral 'if ExtraLateralTags~="none"then iq=iq..ExtraLateralTags end;local ir=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if ir==axisCommandType.byThrottle then local is=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(iq,axisCommandId.lateral)Nav:setEngineForceCommand(iq,is,ic)elseif ir==axisCommandType.byTargetSpeed then local it=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)ij=ij..' , '..iq;ik=ik+it end;local iu='thrust analog vertical 'if ExtraVerticalTags~="none"then iu=iu..ExtraVerticalTags end;local iv=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if iv==axisCommandType.byThrottle then local iw=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(iu,axisCommandId.vertical)if Z~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(iu,iw,ic,'airfoil','ground','',ie)else Nav:setEngineForceCommand(iu,vec3(),ic)Nav:setEngineForceCommand('airfoil vertical',iw,ic,'airfoil','','',ie)Nav:setEngineForceCommand('ground vertical',iw,ic,'ground','','',ie)end elseif iv==axisCommandType.byTargetSpeed then if Z==0 then Nav:setEngineForceCommand('hover',vec3(),ic)end;local ix=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)ij=ij..' , '..iu;ik=ik+ix end;if ik:len()>constants.epsilon then if G~=0 or il or math.abs(hX:dot(hU))<0.95 then ij=ij..', brake'end;Nav:setEngineForceCommand(ij,ik,id,'','','',ie)end;Nav:setBoosterCommand('rocket_engine')if O and not VanillaRockets then local bo=vec3(core.getVelocity()):len()local iy=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local iz=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bo*3.6>iz*(1-iy)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bo*3.6<iz*(1-iy)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local iA=unit.getThrottle()local hD=iA/100;if j==0 then hD=hD*MaxGameVelocity;if bo>=hD*(1-iy)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bo<hD*(1-iy)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else hD=hD*ReentrySpeed/3.6;if bo>=hD*(1-iy)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bo<hD*(1-iy)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bd=coroutine.resume(beginSetup)if bd then SetupComplete=true end else Nav:update()if not b0 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(iB)if iB=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and aa==-1 and(j()>0 or ae<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b5>w then K="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;b2=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif iB=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif iB=="forward"then B=B-1 elseif iB=="backward"then B=B+1 elseif iB=="left"then E=E-1 elseif iB=="right"then E=E+1 elseif iB=="yawright"then F=F-1 elseif iB=="yawleft"then F=F+1 elseif iB=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif iB=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif iB=="up"then Z=Z+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif iB=="down"then Z=Z-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif iB=="groundaltitudeup"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AggAltHoldLocked()then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end else AntigravTargetAltitude=(desiredBaseAltitude or 1000)+100 end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end elseif AltitudeHold then HoldAltitude=HoldAltitude+M;if HoldAltitude>50000 then HoldAltitude=50000 end else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif iB=="groundaltitudedown"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AggAltHoldLocked()then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N end else AntigravTargetAltitude=desiredBaseAltitude or 1000 end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end elseif AltitudeHold then HoldAltitude=HoldAltitude-M;if HoldAltitude<-1500 then HoldAltitude=ae end else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif iB=="option1"then IncrementAutopilotTargetIndex()v=false elseif iB=="option2"then DecrementAutopilotTargetIndex()v=false elseif iB=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;v=false;ToggleWidgets()elseif iB=="option4"then ToggleAutopilot()v=false elseif iB=="option5"then ToggleLockPitch()v=false elseif iB=="option6"then ToggleAltitudeHold()v=false elseif iB=="option7"then wipeSaveVariables()v=false elseif iB=="option8"then ToggleFollowMode()v=false elseif iB=="option9"then if gyro~=nil then gyro.toggle()ah=gyro.getState()==1 end;v=false elseif iB=="lshift"then if system.isViewLocked()==1 then J=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then J=true;b1=false;b0=false end elseif iB=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif iB=="lalt"then if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif iB=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not O then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;O=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;O=false end elseif iB=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()elseif iB=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif iB=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif iB=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(iB)if iB=="forward"then B=0 elseif iB=="backward"then B=0 elseif iB=="left"then E=0 elseif iB=="right"then E=0 elseif iB=="yawright"then F=0 elseif iB=="yawleft"then F=0 elseif iB=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif iB=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif iB=="up"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iB=="down"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iB=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iB=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iB=="lshift"then if system.isViewLocked()==1 then J=false;a0=0;a1=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then J=false;b1=false;b0=false end elseif iB=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif iB=="lalt"then if o()==0 and freeLookToggle then if v then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else v=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function AggAltHoldLockable()if not AltitudeHold or not antigrav or ExternalAGG or antigrav.getState()==0 or AntigravTargetAltitude==nil or LockPitch~=nil then return false end;local hI=antigrav.getBaseAltitude()if HoldAltitude>=1000 and ae>=HoldAltitude-20 and ae<=HoldAltitude+20 and hI>=1000 and hI<=HoldAltitude+20 and hI>=HoldAltitude-20 then return true end;return false end;function AggAltHoldLocked()if not AltitudeHold or not antigrav or ExternalAGG or antigrav.getState()==0 or AntigravTargetAltitude==nil or LockPitch~=nil then return false end;return HoldAltitude>=1000 and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 end;function script.onActionLoop(iB)if iB=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AggAltHoldLocked()then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end;if N*1.05<1000 then N=N*1.05 else N=1000 end else AntigravTargetAltitude=desiredBaseAltitude+100 end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;BrakeIsOn=false elseif AltitudeHold then HoldAltitude=HoldAltitude+M;if M*1.05<1000 then M=M*1.05 else M=1000 end else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif iB=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AggAltHoldLocked()then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N end;if N*1.05<1000 then N=N*1.05 else N=1000 end else AntigravTargetAltitude=desiredBaseAltitude-100 end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;BrakeIsOn=false elseif AltitudeHold then HoldAltitude=HoldAltitude-M;if M*1.05<1000 then M=M*1.05 else M=1000 end;if HoldAltitude<-1500 then HoldAltitude=ae end else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif iB=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif iB=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function script.onInputText(iC)local i;local iD="/commands /setname /G /agg /addlocation"local iE,iF;local iG="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n/".."addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location"i=string.find(iC," ")if i~=nil then iE=string.sub(iC,0,i-1)iF=string.sub(iC,i+1)elseif i==nil or not string.find(iD,iE)then for f7 in string.gmatch(iG,"([^\n]+)")do c(f7)end;return end;if iE=="/setname"then if iF==nil or iF==""then K="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(iF)else K="Select a saved target to rename first"end elseif iE=="/addlocation"then if iF==nil or iF==""or string.find(iF,"::")==nil then K="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(iF,"::")local bL=string.sub(iF,1,i-2)local bD=string.sub(iF,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bE='::pos{'..p..','..p..','..p..','..p..','..p..'}'local bF,bG,bH,bI,altitude=string.match(bD,bE)local planet=aS[tonumber(bF)][tonumber(bG)]AddNewLocationByWaypoint(bL,planet,bD)K="Added "..bL.." to saved locations,\nplanet "..planet.name.." at "..bD;a2=5 elseif iE=="/agg"then if iF==nil or iF==""then K="Usage: /agg targetheight"return end;iF=tonumber(iF)if iF<1000 then iF=1000 end;AntigravTargetAltitude=iF;K="AGG Target Height set to "..iF elseif iE=="/G"then if iF==nil or iF==""then K="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if iF=="dump"then for bb,bc in pairs(a)do if type(_G[bc])=="boolean"then if _G[bc]==true then c(bc.." true")else c(bc.." false")end elseif _G[bc]==nil then c(bc.." nil")else c(bc.." ".._G[bc])end end;return end;i=string.find(iF," ")local iH=string.sub(iF,0,i-1)local iI=string.sub(iF,i+1)for bb,bc in pairs(a)do if bc==iH then K="Variable "..iH.." changed to "..iI;local iJ=type(_G[bc])if iJ=="number"then iI=tonumber(iI)elseif iJ=="boolean"then if string.lower(iI)=="true"then iI=true else iI=false end end;_G[bc]=iI;return end end;K="No such global variable: "..iH end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
