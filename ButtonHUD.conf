name: ButtonsHud - Dimencia and Archaegeo v4.925 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        PrimaryR = 130 --export: (Default: 130) Primary HUD color
        PrimaryG = 224 --export: (Default: 224) Primary HUD color
        PrimaryB = 255 --export: (Default: 255) Primary HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: (Default: 35) Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: (Default: 50000) How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;AtmoSpeedLimitIsOn=true;local a={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","StallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=round(ResolutionX/2,0)local t=round(ResolutionY/2,0)local u=false;local v=true;local w=55;local x=false;local y=1;local z=1;local A=false;local B=0;local C=0;local D=0;local E=0;local F=0;local G=0;local H=0;local I=false;local J=false;local K="empty"local L=1;local M=5;local N=5;local O=false;local P,Q=0,0;local R,S=0,0;local T=false;local U=false;local V=nil;local W=0;local X=0;local Y=false;local Z=0;local a0=0;local a1=0;local a2=3;local a3=0;local a4=""local a5=""local a6=0;local a7=false;local a8=false;local a9=false;local aa=-1;local ab=false;local ac=""local ad=j()>0;local ae=math.floor(core.getAltitude())local af=core.getElementIdList()local ag=system.getTime()local ah=nil;local ai=false;local aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local al={}local am=0;local an=0;local ao=""local ap=true;local aq={}local ar=1;local as=0.001;local at=ResolutionX;local au=ResolutionY;local av=nil;local aw=nil;local ax=nil;local ay=nil;local az=false;local aA=false;local aB=0;local aC=nil;local aD={}local aE={}local aF={}local aG=0;local aH=false;local aI={}local aJ={}local aK=d(1/apTickRate)*2;local aL={}local aM={}local aN={}local aO={}local aP=false;local aQ=16;local aR=0;local aS=nil;local aT=""local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=nil;local a_=nil;local b0=false;local b1=false;local b2=autoRollPreference;local b3=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local b4=vec3(core.getWorldVelocity())local b5=vec3(b4):len()local b6=math.cos(StallAngle*constants.deg2rad)local b7=LandingGearGroundHeight;function LoadVariables()if dbHud_1 then local b8=dbHud_1.hasKey;if not useTheseSettings then for b9,ba in pairs(a)do if b8(ba)then local bb=f(dbHud_1.getStringValue(ba))if bb~=nil then c(ba.." "..dbHud_1.getStringValue(ba))_G[ba]=bb;az=true end end end end;coroutine.yield()for b9,ba in pairs(b)do if b8(ba)then local bb=f(dbHud_1.getStringValue(ba))if bb~=nil then c(ba.." "..dbHud_1.getStringValue(ba))_G[ba]=bb;az=true end end end;if useTheseSettings then K="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a2=5 elseif az then K="Loaded Saved Variables (see Lua Chat Tab for list)"else K="No Saved Variables Found - Stand up / leave remote to save settings"end else K="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bc=system.getTime()if LastStartTime+180<bc then LastMaxBrakeInAtmo=0 end;if az then s=round(ResolutionX/2,0)t=round(ResolutionY/2,0)at=ResolutionX;au=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b2=autoRollPreference end;LastStartTime=bc;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then K="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a2=5 end;b6=math.cos(StallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]end;function CalculateFuelVolume(bd,be)if bd>be then be=bd end;if ContainerOptimization>0 then be=be-be*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then be=be-be*FuelTankOptimization*0.05 end;return be end;function ProcessElements()for b9 in pairs(af)do local type=l(af[b9])if type=="landing gear"then A=true end;if type=="dynamic core"then local bf=h(af[b9])if bf>10000 then aQ=128 elseif bf>1000 then aQ=64 elseif bf>150 then aQ=32 end end;aG=aG+h(af[b9])if fuelX~=0 and fuelY~=0 then if type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank"then local bf=h(af[b9])local bg=m(af[b9])local bd=0;local bh=system.getTime()if type=="Atmospheric Fuel Tank"then local be=400;local bi=35.03;if bf>10000 then be=51200;bi=5480 elseif bf>1300 then be=6400;bi=988.67 elseif bf>150 then be=1600;bi=182.67 end;bd=bg-bi;if fuelTankHandlingAtmo>0 then be=be+be*fuelTankHandlingAtmo*0.2 end;be=CalculateFuelVolume(bd,be)aD[#aD+1]={af[b9],core.getElementNameById(af[b9]),be,bi,bd,bh}end;if type=="Rocket Fuel Tank"then local be=320;local bi=173.42;if bf>65000 then be=40000;bi=25740 elseif bf>6000 then be=5120;bi=4720 elseif bf>700 then be=640;bi=886.72 end;bd=bg-bi;if fuelTankHandlingRocket>0 then be=be+be*fuelTankHandlingRocket*0.2 end;be=CalculateFuelVolume(bd,be)aF[#aF+1]={af[b9],core.getElementNameById(af[b9]),be,bi,bd,bh}end;if type=="Space Fuel Tank"then local be=2400;local bi=182.67;if bf>10000 then be=76800;bi=5480 elseif bf>1300 then be=9600;bi=988.67 end;bd=bg-bi;if fuelTankHandlingSpace>0 then be=be+be*fuelTankHandlingSpace*0.2 end;be=CalculateFuelVolume(bd,be)aE[#aE+1]={af[b9],core.getElementNameById(af[b9]),be,bi,bd,bh}end end end end end;function SetupChecks()if gyro~=nil then ah=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if ad then BrakeIsOn=true end;if radar_1 then if l(radar_1.getId())=="Space Radar"then T=true else U=true end end;if door then for _,ba in pairs(door)do ba.toggle()end end;if switch then for _,ba in pairs(switch)do ba.toggle()end end;if forcefield then for _,ba in pairs(forcefield)do ba.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if A then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if b7~=nil then Nav.axisCommandManager:setTargetGroundAltitude(b7)if b7==0 and not A then GearExtended=true end else b7=Nav:getTargetGroundAltitude()if GearExtended or not A then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ad and not dbHud_1 and(GearExtended or not A)then BrakeIsOn=true end;WasInAtmo=ad end;function ConvertResolutionX(ba)if ResolutionX==1920 then return ba else return round(ResolutionX*ba/1920,0)end end;function ConvertResolutionY(ba)if ResolutionY==1080 then return ba else return round(ResolutionY*ba/1080,0)end end;function RefreshLastMaxBrake(bj,bk)if bj==nil then bj=core.g()end;bj=round(bj,5)local bl=j()if bk~=nil and bk or(aC==nil or aC~=bj)then local b4=core.getVelocity()local bm=vec3(b4):len()local bn=f(unit.getData()).maxBrake;if bn~=nil and bn>0 and ad then bn=bn/utils.clamp(bm/100,0.1,1)bn=bn/bl;if bn>LastMaxBrakeInAtmo and bl>0.10 then LastMaxBrakeInAtmo=bn end end;if bn~=nil and bn>0 then LastMaxBrake=bn end;aC=bj end end;function MakeButton(bo,bp,bq,br,bs,bt,bu,bv,bw)local bx={enableName=bo,disableName=bp,width=bq,height=br,x=bs,y=bt,toggleVar=bu,toggleFunction=bv,drawCondition=bw,hovered=false}table.insert(aq,bx)return bx end;function UpdateAtlasLocationsList()AtlasOrdered={}for b9,ba in pairs(aS[0])do table.insert(AtlasOrdered,{name=ba.name,index=b9})end;local function by(bz,bA)return bz.name<bA.name end;table.sort(AtlasOrdered,by)end;function AddLocationsToAtlas()for b9,ba in pairs(SavedLocations)do table.insert(aS[0],ba)end;UpdateAtlasLocationsList()end;function zeroConvertToWorldCoordinates(bB)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bC='::pos{'..p..','..p..','..p..','..p..','..p..'}'local bD,bE,bF,bG,altitude=string.match(bB,bC)if bD=="0"and bE=="0"then return vec3(tonumber(bF),tonumber(bG),tonumber(altitude))end;bG=math.rad(bG)bF=math.rad(bF)local planet=aS[tonumber(bD)][tonumber(bE)]local bH=math.cos(bF)local bI=vec3(bH*math.cos(bG),bH*math.sin(bG),math.sin(bF))return planet.center+(planet.radius+altitude)*bI end;function AddNewLocationByWaypoint(bJ,planet,bB)if dbHud_1 then local bK={}local position=zeroConvertToWorldCoordinates(bB)if planet.name=="Space"then bK={position=position,name=bJ,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bL=false;if planet.atmos then bL=true else bL=false end;bK={position=position,name=bJ,atmosphere=bL,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=bK;table.insert(aS[0],bK)UpdateAtlasLocationsList()else K="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local bM=planet.name..". "..#SavedLocations;if radar_1 then local bN,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if bN~=nil and bN~=""then bM=bM.." "..radar_1.getConstructName(bN)end end;local bK={}local bL=false;if planet.atmos then bL=true end;bK={position=position,name=bM,atmosphere=bL,planetname=planet.name,gravity=planet.gravity}SavedLocations[#SavedLocations+1]=bK;table.insert(aS[0],bK)UpdateAtlasLocationsList()K="Location saved as "..bM else K="Databank must be installed to save locations"end end;function UpdatePosition(bO)local bP=-1;local bK;for b9,ba in pairs(SavedLocations)do if ba.name and ba.name==CustomTarget.name then bP=b9;break end end;if bP~=-1 then local bQ;if bO~=nil then bK={position=SavedLocations[bP].position,name=bO,atmosphere=SavedLocations[bP].atmosphere,planetname=SavedLocations[bP].planetname,gravity=SavedLocations[bP].gravity}else bK={position=vec3(core.getConstructWorldPos()),name=SavedLocations[bP].name,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}end;SavedLocations[bP]=bK;bP=-1;for b9,ba in pairs(aS[0])do if ba.name and ba.name==CustomTarget.name then bP=b9 end end;if bP>-1 then aS[0][bP]=bK end;UpdateAtlasLocationsList()K=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else K="Name Not Found"end end;function ClearCurrentPosition()local bP=-1;for b9,ba in pairs(aS[0])do if ba.name and ba.name==CustomTarget.name then bP=b9 end end;if bP>-1 then table.remove(aS[0],bP)end;bP=-1;for b9,ba in pairs(SavedLocations)do if ba.name and ba.name==CustomTarget.name then K=ba.name.." saved location cleared"bP=b9;break end end;if bP~=-1 then table.remove(SavedLocations,bP)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(bR)bR[#bR+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and a6==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if a6==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;a6=0 end end;function ToggleWidgets()if ap then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ap=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ap=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(bS,bT,bs,bt,bq,br)if bS>bs and bS<bs+bq and bT>bt and bT<bt+br then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;if not StrongBrakes and b5>w then K="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local bU=vec3(core.getConstructWorldOrientationForward())local bV=vec3(core.getConstructWorldOrientationRight())local bW=vec3(core.getWorldVertical())local bX=getPitch(bW,bU,bV)LockPitch=bX;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then M,OldButtonMod=5,5;Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;I=false;BrakeLanding=false;Reentry=false;b2=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not ad then AutoTakeoff=false;HoldAltitude=ae;if not a8 and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end;if a8 then HoldAltitude=100000 end else b2=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then I=not I;if I then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b2=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else K="Follow Mode only works with Remote controller"I=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not a8 then if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b5>w then K="Insufficient Brake Force\nCoast landing will be inaccurate"end;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if ae>100000 or ae==0 then Autopilot=true else a7=true end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;I=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;u=false;LockPitch=nil else a8=true;ToggleAltitudeHold()end else a8=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;u=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ae end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b2=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;LockPitch=nil;b2=autoRollPreference end end;function CheckDamage(bR)local bY=0;ao=""local bZ=aG;local b_=0;local c0=0;local c1=0;local c2=0;local c3=""for b9 in pairs(af)do local bf=0;local c4=0;c4=h(af[b9])bf=k(af[b9])b_=b_+bf;if bf<c4 then if bf==0 then c1=c1+1 else c0=c0+1 end;if aH and#al==0 then position=vec3(core.getElementPositionById(af[b9]))local bs=position.x-aQ;local bt=position.y-aQ;local c5=position.z-aQ;table.insert(al,core.spawnArrowSticker(bs,bt,c5+1,"down"))table.insert(al,core.spawnArrowSticker(bs,bt,c5+1,"down"))core.rotateSticker(al[2],0,0,90)table.insert(al,core.spawnArrowSticker(bs+1,bt,c5,"north"))table.insert(al,core.spawnArrowSticker(bs+1,bt,c5,"north"))core.rotateSticker(al[4],90,90,0)table.insert(al,core.spawnArrowSticker(bs-1,bt,c5,"south"))table.insert(al,core.spawnArrowSticker(bs-1,bt,c5,"south"))core.rotateSticker(al[6],90,-90,0)table.insert(al,core.spawnArrowSticker(bs,bt-1,c5,"east"))table.insert(al,core.spawnArrowSticker(bs,bt-1,c5,"east"))core.rotateSticker(al[8],90,0,90)table.insert(al,core.spawnArrowSticker(bs,bt+1,c5,"west"))table.insert(al,core.spawnArrowSticker(bs,bt+1,c5,"west"))core.rotateSticker(al[10],-90,0,90)table.insert(al,af[b9])end elseif aH and#al>0 and al[11]==af[b9]then for c6 in pairs(al)do core.deleteSticker(al[c6])end;al={}end end;bY=d(b_/bZ*100)if bY<100 then bR[#bR+1]=[[<g class="pbright txt">]]c2=d(bY*2.55)c3=e("rgb(%d,%d,%d)",255-c2,c2,0)if bY<100 then bR[#bR+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],c3,bY)if c1>0 then bR[#bR+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],c3,c1,c0)elseif c0>0 then bR[#bR+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],c3,c0)end end;bR[#bR+1]=[[<\g>]]end end;function DrawCursorLine(bR)local c7=d(utils.clamp(a3/(at/4)*255,0,255))bR[#bR+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a0,a1,d(PrimaryR+0.5)+c7,d(PrimaryG+0.5)-c7,d(PrimaryB+0.5)-c7)end;function getPitch(c8,c9,bA)local ca=c8:cross(bA):normalize_inplace()local bX=math.acos(utils.clamp(ca:dot(-c9),-1,1))*constants.rad2deg;if ca:cross(-c9):dot(bA)<0 then bX=-bX end;return bX end;function clearAll()if ab then ab=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;I=false;u=false;a7=false;a8=false;x=false;b2=autoRollPreference;VectorToTarget=false;TurnBurn=false;ah=false;LockPitch=nil else ab=true end end;function wipeSaveVariables()if not dbHud_1 then K="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"a2=5 else if aA then for b9,ba in pairs(a)do dbHud_1.setStringValue(ba,g(nil))end;for b9,ba in pairs(b)do if ba~="SavedLocations"then dbHud_1.setStringValue(ba,g(nil))end end;K="Databank wiped. New variables will save after re-enter seat and exit"a2=5;aA=false;az=false;Y=true else K="Press ALT-7 again to confirm wipe of ALL data"aA=true end end end;function CheckButtons()for _,ba in pairs(aq)do if ba.hovered then if not ba.drawCondition or ba.drawCondition()then ba.toggleFunction()end;ba.hovered=false end end end;function SetButtonContains()local bs=a0+at/2;local bt=a1+au/2;for _,ba in pairs(aq)do ba.hovered=Contains(bs,bt,ba.x,ba.y,ba.width,ba.height)end end;function DrawButton(bR,cb,hover,bs,bt,cc,cd,ce,cf,cg,ch)if type(cg)=="function"then cg=cg()end;if type(ch)=="function"then ch=ch()end;bR[#bR+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bs,bt,cc,cd)if cb then bR[#bR+1]=e("%s'",ce)else bR[#bR+1]=cf end;if hover then bR[#bR+1]=" style='stroke:white; stroke-width:2'"else bR[#bR+1]=" style='stroke:black; stroke-width:1'"end;bR[#bR+1]="></rect>"bR[#bR+1]=e("<text x='%f' y='%f' font-size='24' fill='",bs+cc/2,bt+cd/2+5)if cb then bR[#bR+1]="black"else bR[#bR+1]="white"end;bR[#bR+1]="' text-anchor='middle' font-family='Montserrat'>"if cb then bR[#bR+1]=e("%s</text>",cg)else bR[#bR+1]=e("%s</text>",ch)end end;function DrawButtons(bR)local ci="rgb(50,50,50)'"local cj="rgb(210,200,200)"local ck=DrawButton;for _,ba in pairs(aq)do local bp=ba.disableName;local bo=ba.enableName;if type(bp)=="function"then bp=bp()end;if type(bo)=="function"then bo=bo()end;if not ba.drawCondition or ba.drawCondition()then ck(bR,ba.toggleVar(),ba.hovered,ba.x,ba.y,ba.width,ba.height,cj,ci,bp,bo)end end end;function DrawTank(bR,aP,bs,cl,cm,cn,co,cp)local cq=1;local cr=2;local cs=3;local ct=4;local cu=5;local cv=6;local cw=""local cx=0;local cy=fuelY;local cz=fuelY+10;if o()==1 and not RemoteHud then cy=cy-50;cz=cz-50 end;bR[#bR+1]=[[<g class="pdim txtfuel">]]if cm=="ATMO"then cw="atmofueltank"elseif cm=="SPACE"then cw="spacefueltank"else cw="rocketfueltank"end;cx=_G[cw.."_size"]if#cn>0 then for i=1,#cn do local bM=string.sub(cn[i][cr],1,12)local cA=0;for c6=1,cx do if cn[i][cr]==f(unit[cw.."_"..c6].getData()).name then cA=c6;break end end;if aP or co[i]==nil or cp[i]==nil then local cB=0;local cC=0;local cD=0;local cE=0;local bh=system.getTime()if cA~=0 then cp[i]=f(unit[cw.."_"..cA].getData()).percentage;co[i]=f(unit[cw.."_"..cA].getData()).timeLeft;if co[i]=="n/a"then co[i]=0 end else cD=m(cn[i][cq])-cn[i][ct]cB=cn[i][cs]cp[i]=d(0.5+cD*100/cB)cC=cn[i][cu]cE=cn[i][cv]if cC<=cD then co[i]=0 else co[i]=d(0.5+cD/((cC-cD)/(bh-cE)))end;cn[i][cu]=cD;cn[i][cv]=bh end end;if bM==cl then bM=e("%s %d",cm,i)end;if cA==0 then bM=bM.." *"end;local cF;if co[i]==0 then cF="n/a"else cF=FormatTimeString(co[i])end;if cp[i]~=nil then local c2=d(cp[i]*2.55)local c3=e("rgb(%d,%d,%d)",255-c2,c2,0)local cG=""if cF~="n/a"and co[i]<120 or cp[i]<5 then if aP then cG=[[class="red"]]end end;bR[#bR+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bs,cy,cG,bM,bs,cz,c3,cp[i],cF)cy=cy+30;cz=cz+30 end end end;bR[#bR+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(b4)b4=vec3(b4)local bX=-math.deg(math.atan(b4.y,b4.z))+180;bX=bX-90;if bX<0 then bX=360+bX end;if bX>180 then bX=-180+bX-180 end;return-bX end;function getRelativeYaw(b4)b4=vec3(b4)local cH=math.deg(math.atan(b4.y,b4.x))-90;if cH<-180 then cH=360+cH end;return cH end;function AlignToWorldVector(cI,cJ)if not ad or b3>b6+0.08 or aa~=-1 then if cJ==nil then cJ=as end;cI=vec3(cI):normalize()local cK=vec3(core.getConstructWorldOrientationForward())-cI;local cL=-getMagnitudeInDirection(cK,core.getConstructWorldOrientationRight())*ar;local cM=-getMagnitudeInDirection(cK,core.getConstructWorldOrientationUp())*ar;if am==0 then am=cL/2 end;if an==0 then an=cM/2 end;D=D-(cL+(cL-am)*DampingMultiplier)C=C+cM+(cM-an)*DampingMultiplier;am=cL;an=cM;if math.abs(cL)<cJ and math.abs(cM)<cJ then return true end;return false end end;function getAPEnableName()local bM=AutopilotTargetName;if bM==nil then bM=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if bM==nil then bM="None"end;return"Engage Autopilot: "..bM end;function getAPDisableName()local bM=AutopilotTargetName;if bM==nil then bM=CustomTarget.name end;if bM==nil then bM="None"end;return"Disable Autopilot: "..bM end;function ToggleAntigrav()if antigrav and not ExternalAGG then N,OldAntiMod=5,5;if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then K="Re-Entry cancelled"Reentry=false;b2=autoRollPreference;AltitudeHold=false elseif j()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then K="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"a2=5 elseif not x then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then K="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b2=true;BrakeIsOn=false;K="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;b2=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;K="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;function SetupButtons()local cN=50;local cO=260;local cP=MakeButton("Enable Brake Toggle","Disable Brake Toggle",cO,cN,at/2-cO/2,au/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then K="Brakes in Toggle Mode"else K="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",cO,cN,at/2-cO/2-50-cP.width,au/2-cN+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",cO,cN,at/2-cO/2+cP.width+50,au/2-cN+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local cQ=MakeButton(getAPEnableName,getAPDisableName,600,60,at/2-600/2,au/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,cQ.height,cQ.x+cQ.width+30,cQ.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,cQ.height,cQ.x+cQ.width+30,cQ.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,cQ.height,cQ.x-200-30,cQ.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)cN=60;cO=300;local bs=10;local bt=au/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",cO,cN,bs,bt,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",cO,cN,bs+cO+20,bt,function()return AltitudeHold end,ToggleAltitudeHold)bt=bt+cN+20;MakeButton("Engage Autoland","Disable Autoland",cO,cN,bs,bt,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",cO,cN,bs+cO+20,bt,function()return AutoTakeoff end,ToggleAutoTakeoff)bt=bt+cN+20;MakeButton("Show Orbit Display","Hide Orbit Display",cO,cN,bs,bt,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then K="Orbit Display Enabled"else K="Orbit Display Disabled"end end)MakeButton("Engage Speed Limit","Disable Speed Limit",cO,cN,bs+cO+20,bt,function()return AtmoSpeedLimitIsOn end,function()AtmoSpeedLimitIsOn=not AtmoSpeedLimitIsOn;if AtmoSpeedLimitIsOn then K="Atmo Speed Limit Enabled"else K="Atmo Speed Limit Disabled"end end)bt=bt+cN+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",cO,cN,bs,bt,function()return Reentry end,function()x=true;BeginReentry()end,function()return ae>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",cO,cN,bs+cO+20,bt,function()return Reentry end,BeginReentry,function()return ae>ReentryAltitude end)bt=bt+cN+20;MakeButton("Engage Follow Mode","Disable Follow Mode",cO,cN,bs,bt,function()return I end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",cO,cN,bs+cO+20,bt,function()return aH end,function()aH=not aH;if aH then K="Repair Arrows Enabled"else K="Repair Arrows Disabled"end end,function()return o()==1 end)bt=bt+cN+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",cO,cN,bs,bt,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bt=bt+cN+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,cO*2,cN,bs,bt,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local cR=Nav.axisCommandManager:getAxisCommandType(0)local cS="TRAVEL"if cR==1 then cS="CRUISE"end;if Autopilot then cS="AUTOPILOT"end;return cS end;function UpdateHud(bR)local altitude=ae;local b4=core.getVelocity()local bm=vec3(b4):len()local bW=vec3(core.getWorldVertical())local bU=vec3(core.getConstructWorldOrientationForward())local bV=vec3(core.getConstructWorldOrientationRight())local cT=vec3(core.getConstructWorldOrientationUp())local cU=getRoll(bW,bU,bV)local cV=cU/180*math.pi;local cW=math.cos(cV)local cX=math.sin(cV)local bX=getPitch(bW,bU,bV*cW+cT*cX)local cY=cU;local cZ=bX;local c_=j()local d0=d(unit.getThrottle())local d1=bm*3.6;local d2=unit.getAxisCommandValue(0)local cS=GetFlightStyle()local d3="ROLL"local d4=unit.getClosestPlanetInfluence()>0;if d0==nil then d0=0 end;if not d4 then if bm>5 then bX=getRelativePitch(b4)cU=getRelativeYaw(b4)else bX=0;cU=0 end;d3="YAW"end;bR[#bR+1]=a5;bR[#bR+1]=ao;bR[#bR+1]=a4;if aR%aK==0 then aP=true end;if fuelX~=0 and fuelY~=0 then DrawTank(bR,aP,fuelX,"Atmospheric ","ATMO",aD,aN,aO)DrawTank(bR,aP,fuelX+100,"Space fuel t","SPACE",aE,aL,aM)DrawTank(bR,aP,fuelX+200,"Rocket fuel ","ROCKET",aF,aI,aJ)end;if aP then aP=false;aR=0 end;aR=aR+1;DrawVerticalSpeed(bR,altitude)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if d4 then DrawRollLines(bR,centerX,centerY,cY,d3,d4)DrawArtificialHorizon(bR,cZ,cY,centerX,centerY,d4,d(getRelativeYaw(b4)),bm)else DrawRollLines(bR,centerX,centerY,cU,d3,d4)DrawArtificialHorizon(bR,bX,cU,centerX,centerY,d4,d(cU),bm)end;DrawAltitudeDisplay(bR,altitude,d4)DrawPrograde(bR,b4,bm,centerX,centerY)end end;DrawThrottle(bR,cS,d0,d2)DrawSpeed(bR,d1)DrawWarnings(bR)DisplayOrbitScreen(bR)if screen_2 then local bB=vec3(core.getConstructWorldPos())local bs=960+bB.x/aU;local bt=450+bB.y/aV;screen_2.moveContent(aW,(bs-80)/19.2,(bt-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(bR)local d5=aj;local d6=ak;local d7=aj;local d8=ak;if IsInFreeLook()and not brightHud then d5=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]d6=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;bR[#bR+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],d5,d5,d7,d7,d6,d6,d8,d8,ResolutionX,ResolutionY)end;function HUDEpilogue(bR)bR[#bR+1]="</svg>"end;function DrawSpeed(bR,d1)local d9=throtPosY-10;local da=throtPosX+10;bR[#bR+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then d9=75 end;bR[#bR+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],da,d9,d(d1))end;function DrawOdometer(bR,W,TotalDistanceTravelled,cS,X,c_)local db=ConvertResolutionX(1240)local dc=ConvertResolutionY(55)local dd=dc+10;local c_=j()local bj=core.g()local de=0;local df=0;local dg=0;RefreshLastMaxBrake(bj)if ad then dg=LastMaxBrakeInAtmo else dg=LastMaxBrake end;maxThrust=Nav:maxForceForward()aB=n()if not ShowOdometer then return end;local dh=vec3(core.getWorldAcceleration()):len()/9.80665;if bj>0.1 then df=aB*bj;de=maxThrust/bj end;bR[#bR+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then db=ConvertResolutionX(1120)dc=ConvertResolutionY(55)dd=dc+10 elseif ad then local di=ConvertResolutionX(770)bR[#bR+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],di,dc,di,dd,c_)end;bR[#bR+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],db,dc,db,dd,bj/9.80665,db,dc+20,db,dd+20,dh)bR[#bR+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then bR[#bR+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),W,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(X),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aB/1000,ConvertResolutionX(1240),ConvertResolutionY(10),dg/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),cS)if bj>0.1 then bR[#bR+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),de/1000,ConvertResolutionX(1240),ConvertResolutionY(20),df/1000)else bR[#bR+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else bR[#bR+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),cS)end;bR[#bR+1]="</g>"end;function DrawThrottle(bR,cS,d0,d2)local cy=throtPosY+10;local cz=throtPosY+20;if o()==1 and not RemoteHud then cy=55;cz=65 end;local dj="CRUISE"local unit="km/h"local dk=d2;if cS=="TRAVEL"or cS=="AUTOPILOT"then dj="THROT"unit="%"dk=d0;local dl="dim"if d0<0 then dl="red"end;bR[#bR+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],dl,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(d0),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;bR[#bR+1]=e([[
                <g class="pbright txtstart">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d %s</text>
                </g>
            </g>]],throtPosX+10,cy,dj,throtPosX+10,cz,dk,unit)end;function DrawVerticalSpeed(bR,altitude)if altitude<200000 and not ad or altitude and ad then local dm=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local dn=0;if math.abs(dm)>1 then dn=45*math.log(math.abs(dm),10)if dm<0 then dn=-dn end end;bR[#bR+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(dm),d(dn))end end;function getHeading(c9)local dp=-vec3(core.getWorldVertical())c9=c9-c9:project_on(dp)local dq=vec3(0,0,1)dq=dq-dq:project_on(dp)local dr=dq:cross(dp)local dn=dq:angle_between(c9)*constants.rad2deg;if c9:dot(dr)<0 then dn=360-dn end;return dn end;function DrawRollLines(bR,centerX,centerY,cY,d3,d4)local ds=circleRad;local dt=20;dt=d(dt)local du=d(cY)if d4 then for i=-45,45,5 do local dv=i;bR[#bR+1]=e([[<g transform="rotate(%f,%d,%d)">]],dv,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;bR[#bR+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+ds+dt-len,centerX,centerY+ds+dt)end;bR[#bR+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+ds+dt-35,d3,centerX,centerY+ds+dt-25,du)bR[#bR+1]=e([[<g transform="rotate(%f,%d,%d)">]],-cY,centerX,centerY)bR[#bR+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+ds+dt-20,centerX+5,centerY+ds+dt-20,centerX,centerY+ds+dt-15)bR[#bR+1]="</g>"end;local cH=du;if d4 then cH=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local dw=20;local dx=d(cH)local dy=0;local dz=centerY+ds+dt+20;local dA=centerX;if d3~="YAW"then dz=ConvertResolutionY(130)dA=ConvertResolutionX(960)end;local dB=[[<path class="txttick line" d="]]for i=d(dx-(dw+10)-dx%5+0.5),d(dx+dw+10+dx%5+0.5),5 do local bs=dA+-i*5+cH*5;if i%10==0 then dy=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;bR[#bR+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bs+5,dz-12,p)elseif i%5==0 then dy=5 end;if dy==10 then dB=e([[%s M %f %f v %d]],dB,bs,dz-5,dy)else dB=e([[%s M %f %f v %d]],dB,bs,dz-2.5,dy)end end;bR[#bR+1]=dB..[["/>]]bR[#bR+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],dA-5,dz+10,dA+5,dz+10,dA,dz+5)if d4 then d3="HDG"end;bR[#bR+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],dA,dz+25,dx,dA,dz+35,d3)end;function DrawArtificialHorizon(bR,cZ,cY,centerX,centerY,d4,dC,bm)local ds=circleRad;local dD=d(ds*3/5)if ds>0 then local dE=d(cZ)local len=0;local dB=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*cY,centerX,centerY)if not ad then dB=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;bR[#bR+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],ds-1,centerX,centerY)bR[#bR+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(dE-30-dE%5+0.5),d(dE+30+dE%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bt=centerY+-i*5+cZ*5;if len==30 then dB=e([[%s M %d %f h %d]],dB,centerX-dD-len,bt,len)if ad then bR[#bR+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*cY,centerX,centerY,centerX-dD+10,bt,i)bR[#bR+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*cY,centerX,centerY,centerX+dD-10,bt,i)if i==0 or i==180 or i==-180 then bR[#bR+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*cY,centerX,centerY,centerX-dD+20,bt,dD*2-40)end else bR[#bR+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-dD+10,bt,i)bR[#bR+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+dD-10,bt,i)end;dB=e([[%s M %d %f h %d]],dB,centerX+dD,bt,len)else dB=e([[%s M %d %f h %d]],dB,centerX-dD-len,bt,len)dB=e([[%s M %d %f h %d]],dB,centerX+dD,bt,len)end end;bR[#bR+1]=dB..[["/>]]local dF="PITCH"if not d4 then dF="REL PITCH"end;if cZ>90 and not ad then cZ=90-(cZ-90)elseif cZ<-90 and not ad then cZ=-90-(cZ+90)end;if ds>200 then if ad then if bm>w then bR[#bR+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,dC)end;bR[#bR+1]=e([[<g transform="rotate(%f,%d,%d)">]],-cY,centerX,centerY)else bR[#bR+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;bR[#bR+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-dD+25,centerY-5,centerX-dD+20,centerY,centerX-dD+25,centerY+5,centerX-dD+50,centerY+4,dE)bR[#bR+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+dD-25,centerY-5,centerX+dD-20,centerY,centerX+dD-25,centerY+5,centerX+dD-30,centerY+4,dE)bR[#bR+1]="</g>"end;local dG=d(ds/3)bR[#bR+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-dG,centerY,ds-dG)if not ad and d4 then bR[#bR+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*cY,centerX,centerY,centerX-dD+10,centerY,dD*2-20)end;bR[#bR+1]="</g>"if ds<200 then if ad and bm>w then bR[#bR+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-ds,dF,centerX,centerY-ds+10,dE,centerX,centerY-15,"Yaw",centerX,centerY+20,dC)else bR[#bR+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-ds,dF,centerX,centerY-ds+15,dE)end end end end;function DrawAltitudeDisplay(bR,altitude,d4)local dH=altMeterX;local dI=altMeterY;local dJ=78;local dK=19;local dL=AboveGroundLevel()if dL~=-1 then table.insert(bR,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],dH+dJ,dI+dK+20,dL))end;if d4 and(altitude<200000 and not ad or altitude and ad)then table.insert(bR,e([[
                    <g class="pdim">
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/>
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],dH-1,dI-4,dJ+2,dK+6,dH+1,dI-1,dJ-4,dK))local bP=0;local dM=1;local dN=0;local dO=altitude<0;local dP=9;if dO then dP=0 end;local altitude=math.abs(altitude)while bP<6 do local dQ=11;local dR=16;local dS=9;local dT=14;local cG="altsm"if bP>2 then dR=dR+3;dQ=dQ+2;dT=dT+2;dS=dS-6;cG="altbig"end;if dO then cG=cG.." red"end;local dU=altitude/dM%10;local dV=d(dU)local dW=d((dV+1)%10)local dX=dN;if bP==0 then dX=dU-dV;if dO then dX=1-dX end end;if dO and(bP==0 or dN~=0)then local dY=dW;dW=dV;dV=dY end;local dZ=dR*(dX-1)local d_=dZ+dR;local bs=dH+dS+(6-bP)*dQ;local bt=dI+dT;table.insert(bR,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],cG,bs,bt+dZ,dW,bs,bt+d_,dV))bP=bP+1;dM=dM*10;if dV==dP then dN=dX else dN=0 end end;table.insert(bR,[[</g></g>]])end end;function DrawPrograde(bR,b4,bm,centerX,centerY)if bm>5 and not ad or bm>w then local ds=circleRad;local e0=20;local e1=20;local e2=vec3(b4)local e3=getRelativePitch(e2)local e4=getRelativeYaw(e2)local e5=-e4/e1*ds;local e6=e3/e0*ds;local bs=centerX+e5;local bt=centerY+e6;local a3=math.sqrt(e5^2+e6^2)if a3<ds then bR[#bR+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',bs,bt)else local dn=math.atan(e6,e5)local e7=centerX+ds*math.cos(dn)local e8=centerY+ds*math.sin(dn)bR[#bR+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',e7,e8)end;e3=getRelativePitch(-e2)e4=getRelativeYaw(-e2)e5=-e4/e1*ds;e6=e3/e0*ds;bs=centerX+e5;bt=centerY+e6;a3=math.sqrt(e5^2+e6^2)if not ad then if a3<ds then bR[#bR+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',bs,bt)else local dn=math.atan(e6,e5)local e7=centerX+ds*math.cos(dn)local e8=centerY+ds*math.sin(dn)bR[#bR+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',e7,e8)end end end end;function DrawWarnings(bR)bR[#bR+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)bR[#bR+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then bR[#bR+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))bR[#bR+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))bR[#bR+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local e9=ConvertResolutionX(960)local ea=ConvertResolutionY(860)local eb=ConvertResolutionY(880)local ec=ConvertResolutionY(900)local ed=ConvertResolutionY(960)local ee=ConvertResolutionY(200)local ef=ConvertResolutionY(150)local eg=ConvertResolutionY(960)if o()==1 and not RemoteHud then ea=ConvertResolutionY(135)eb=ConvertResolutionY(155)ec=ConvertResolutionY(175)ee=ConvertResolutionY(115)ef=ConvertResolutionY(95)end;if BrakeIsOn then bR[#bR+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],e9,ea)end;if ad and b3<b6 and b5>brakeLandingRate+5 then bR[#bR+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],e9,ee+50)end;if ah then bR[#bR+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],e9,eg)end;if GearExtended then if A then bR[#bR+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],e9,eb)else bR[#bR+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],e9,eb)end;bR[#bR+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],e9,ec,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if O then bR[#bR+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],e9,ed+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ae-antigrav.getBaseAltitude())<501 then bR[#bR+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singularity Altitude: %d</text>]],e9,ee+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else bR[#bR+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singularity Altitude: %d</text>]],e9,ee+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then bR[#bR+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],e9,ee+20,AutopilotStatus)elseif LockPitch~=nil then bR[#bR+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],e9,ee+20,d(LockPitch))elseif I then bR[#bR+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],e9,ee+20)elseif Reentry then bR[#bR+1]=e([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],e9,ee+20)end;if AltitudeHold then if AutoTakeoff then bR[#bR+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],e9,ee,getDistanceDisplayString(HoldAltitude,0,4000))if BrakeIsOn then bR[#bR+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],e9,ee+50)end else bR[#bR+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],e9,ee,getDistanceDisplayString(HoldAltitude,0,4000))end end;if BrakeLanding then if StrongBrakes then bR[#bR+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],e9,ee)else bR[#bR+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],e9,ee)end end;if ProgradeIsOn then bR[#bR+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],e9,ee)end;if RetrogradeIsOn then bR[#bR+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],e9,ee)end;if TurnBurn then bR[#bR+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],e9,ef)end;if VectorToTarget then bR[#bR+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],e9,ee+30,VectorStatus)end;bR[#bR+1]="</g>"end;function DisplayOrbitScreen(bR)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local eh=OrbitMapX;local ei=OrbitMapY;local ej=OrbitMapSize;local ek=4;ei=ei+ek;local el=15;local bs=eh+ej+eh/2+ek;local bt=ei+ej/2+5+ek;local em,en,eo,ep;em=ej/4;ep=0;bR[#bR+1]=[[<g class="pbright txtorb txtmid">]]bR[#bR+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',ej+eh*2,ej+ei,ek,ek)if orbit.periapsis~=nil and orbit.apoapsis~=nil then eo=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(em*2)en=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/eo*(1-orbit.eccentricity)ep=em-orbit.periapsis.altitude/eo-planet.radius/eo;local eq=""if orbit.periapsis.altitude<=0 then eq='redout'end;bR[#bR+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],eq,eh+ej/2+ep+ek,ei+ej/2+ek,em,en)bR[#bR+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',eh+ej/2+ek,ei+ej/2+ek,planet.radius/eo)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then bR[#bR+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bs-35,bt-5,eh+ej/2+em+ep,bt-5)bR[#bR+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bs,bt)bt=bt+el;bR[#bR+1]=e([[<text x="%f" y="%f">%s</text>]],bs,bt,getDistanceDisplayString(orbit.apoapsis.altitude))bt=bt+el;bR[#bR+1]=e([[<text x="%f" y="%f">%s</text>]],bs,bt,FormatTimeString(orbit.timeToApoapsis))bt=bt+el;bR[#bR+1]=e([[<text x="%f" y="%f">%s</text>]],bs,bt,getSpeedDisplayString(orbit.apoapsis.speed))end;bt=ei+ej/2+5+ek;bs=eh-eh/2+10+ek;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then bR[#bR+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bs+35,bt-5,eh+ej/2-em+ep,bt-5)bR[#bR+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bs,bt)bt=bt+el;bR[#bR+1]=e([[<text x="%f" y="%f">%s</text>]],bs,bt,getDistanceDisplayString(orbit.periapsis.altitude))bt=bt+el;bR[#bR+1]=e([[<text x="%f" y="%f">%s</text>]],bs,bt,FormatTimeString(orbit.timeToPeriapsis))bt=bt+el;bR[#bR+1]=e([[<text x="%f" y="%f">%s</text>]],bs,bt,getSpeedDisplayString(orbit.periapsis.speed))end;bR[#bR+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],eh+ej/2+ek,20+ek,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local er=orbit.timeToApoapsis/orbit.period*2*math.pi;local es=em*math.cos(er)local et=en*math.sin(er)bR[#bR+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',eh+ej/2+es+ep+ek,ei+ej/2+et+ek)end;bR[#bR+1]=[[</g>]]end end;function getDistanceDisplayString(a3,eu,ev)a3=a3 or 0;local ew=a3>100000;ev=ev or 1000;if ev<1000 or ev>10000 then ev=1000 end;eu=eu or 2;if eu<0 or eu>3 then eu=0 end;if ew then return round(a3/1000/200,eu).." SU"elseif a3<ev then return string.format("%d",round(a3)).." M"else return round(a3/1000,eu).." KM"end end;function getSpeedDisplayString(bm)return d(round(bm*3.6,0)+0.5).." km/h"end;function FormatTimeString(ex)local ey=0;local ez=0;local eA=0;if ex<60 then ex=d(ex)elseif ex<3600 then ey=d(ex/60)ex=d(ex%60)elseif ex<86400 then ez=d(ex/3600)ey=d(ex%3600/60)else eA=d(ex/86400)ez=d(ex%86400/3600)end;if eA>0 then return eA.."d "..ez.."h "elseif ez>0 then return ez.."h "..ey.."m "elseif ey>0 then return ey.."m "..ex.."s"elseif ex>0 then return ex.."s"else return"0s"end end;function getMagnitudeInDirection(cI,eB)cI=vec3(cI)eB=vec3(eB):normalize()local bb=cI*eB;return bb.x+bb.y+bb.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"V=nil;return true end;local eC=AtlasOrdered[AutopilotTargetIndex].index;local eD=aS[0][eC]if eD.center then AutopilotTargetName=eD.name;V=aY[0][eC]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=eD;for _,ba in pairs(aY[0])do if ba.name==CustomTarget.planetname then V=ba;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(V.center)else AutopilotTargetCoords=CustomTarget.position end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=a_(V):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local eE=LastMaxBrakeInAtmo/V:getGravity(V.center+vec3(0,0,1)*V.radius):len()return eE end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(V.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local b4=core.getWorldVelocity()local bm=vec3(b4):len()local eF,eG=aZ.computeDistanceAndTime(vec3(b4):len(),MaxGameVelocity,n(),Nav:maxForceForward(),warmup,0)local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,eH;if not TurnBurn then _,eH=GetAutopilotBrakeDistanceAndTime(bm)else _,eH=GetAutopilotTBBrakeDistanceAndTime(bm)end;local eI=0;local eJ=0;if AutopilotCruising or not Autopilot and bm>5 then eJ=aZ.computeTravelTime(bm,0,AutopilotDistance)elseif P+eF<AutopilotDistance then eI=AutopilotDistance-(P+eF)eJ=aZ.computeTravelTime(8333.0556,0,eI)else local eK=(AutopilotDistance-P)/eF;eF=AutopilotDistance-P;eG=eG*eK end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return eJ elseif AutopilotBraking then return eH elseif AutopilotCruising then return eJ+eH else return eG+Q+eJ end end;function GetAutopilotBrakeDistanceAndTime(bm)if not ad then RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bm,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aZ.computeDistanceAndTime(bm,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bm)RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bm,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local eL=-1;local eM=-1;if vBooster then eL=vBooster.distance()end;if hover then eM=hover.distance()end;if eL~=-1 and eM~=-1 then if eL<eM then return eL else return eM end elseif eL~=-1 then return eL elseif eM~=-1 then return eM else return-1 end end;function AboveGroundLevel()local eN=-1;local eO=aa;if telemeter_1 then eN=telemeter_1.getDistance()end;if eO~=-1 and eN~=-1 then if eO<eN then return eO else return eN end elseif eO~=-1 then return eO else return eN end end;function tablelength(eP)local eQ=0;for _ in pairs(eP)do eQ=eQ+1 end;return eQ end;function BeginProfile(eR)ProfileTimeStart=system.getTime()end;function EndProfile(eR)local eS=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+eS;ProfileCount=ProfileCount+1;if eS>ProfileTimeMax then ProfileTimeMax=eS end;if eS<ProfileTimeMin then ProfileTimeMin=eS end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local eT=ProfileTimeSum;local eU=ProfileTimeSum/ProfileCount;local eV=ProfileTimeMin;local eW=ProfileTimeMax;local eX=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",eT,eU,eV,eW,eX))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local eY=radar_1.getEntries()local eZ=radar_1.getData()local e_=ConvertResolutionX(1770)local f0=ConvertResolutionY(330)if#eY>0 then local f1=eZ:find('identifiedConstructs":%[%]')if f1==nil and perisPanelID==nil then a6=1;ToggleRadarPanel()end;if f1~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;a4=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],e_,f0,#eY)local f2={}for b9,ba in pairs(eY)do if radar_1.hasMatchingTransponder(ba)==1 then table.insert(f2,ba)end end;if#f2>0 then local bt=ConvertResolutionY(15)local bs=ConvertResolutionX(1370)a4=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],a4,bs,bt)for b9,ba in pairs(f2)do bt=bt+20;a4=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],a4,bs,bt,radar_1.getConstructName(ba))end end else local f3;f3=eZ:find('worksInEnvironment":false')if f3 then a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],e_,f0)else a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],e_,f0)end;if radarPanelID~=nil then a6=0;ToggleRadarPanel()end end end end;function DisplayMessage(bR,f4)if f4~="empty"then bR[#bR+1]=[[<text class="msg" x="50%%" y="310" >]]for f5 in string.gmatch(f4,"([^\n]+)")do bR[#bR+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],f5)end;bR[#bR+1]=[[</text>]]end;if a2~=0 then unit.setTimer("msgTick",a2)a2=0 end end;function updateDistance()local bh=system.getTime()local b4=vec3(core.getWorldVelocity())local d1=vec3(b4):len()local f6=bh-ag;if d1>1.38889 then d1=d1/1000;local f7=d1*(bh-ag)TotalDistanceTravelled=TotalDistanceTravelled+f7;W=W+f7 end;X=X+f6;TotalFlightTime=TotalFlightTime+f6;ag=bh end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,atmos=false,gravity=0},[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;function SetupAtlas()aS=Atlas()for b9,ba in pairs(aS[0])do if av==nil or ba.center.x<av then av=ba.center.x end;if aw==nil or ba.center.x>aw then aw=ba.center.x end;if ax==nil or ba.center.y<ax then ax=ba.center.y end;if ay==nil or ba.center.y>ay then ay=ba.center.y end end;aT=""local f8=1.1*(aw-av)/1920;local f9=1.4*(ay-ax)/1080;for b9,ba in pairs(aS[0])do local bs=960+ba.center.x/f8;local bt=540+ba.center.y/f9;aT=aT..'<circle cx="'..bs..'" cy="'..bt..'" r="'..ba.radius/f8*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(ba.name,"Moon")and not string.match(ba.name,"Sanctuary")and not string.match(ba.name,"Space")then aT=aT.."<text x='"..bs.."' y='"..bt+ba.radius/f8*30+20 .."' font-size='28' fill="..aj.." text-anchor='middle' font-family='Montserrat'>"..ba.name.."</text>"end end;local bB=vec3(core.getConstructWorldPos())local bs=960+bB.x/f8;local bt=540+bB.y/f9;aT=aT..'<circle cx="'..bs..'" cy="'..bt..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='"..bs.."' y='"..bt-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aT=aT..[[</svg>]]aU=f8;aV=f9;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aT)local bB=vec3(core.getConstructWorldPos())local bs=960+bB.x/f8;local bt=540+bB.y/f9;aT='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='80' y='105' font-size='18' fill="..aj.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"aW=screen_2.addContent((bs-80)/19.20,(bt-80)/10.80,aT)end end;function PlanetRef()local function fa(fb)return type(fb)=='number'end;local function fc(fb)return type(tonumber(fb))=='number'end;local function fd(fe)return type(fe)=='table'end;local function ff(fg)return type(fg)=='string'end;local function fh(ba)return fd(ba)and fa(ba.x and ba.y and ba.z)end;local function fi(fj)return fd(fj)and fa(fj.latitude and fj.longitude and fj.altitude and fj.bodyId and fj.systemId)end;local fk=math.pi/180;local fl=180/math.pi;local fm=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bC='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local fn=utils.clamp;local function fo(fp,fq)if fp==0 then return math.abs(fq)<1e-09 end;if fq==0 then return math.abs(fp)<1e-09 end;return math.abs(fp-fq)<math.max(math.abs(fp),math.abs(fq))*fm end;local function fr(fb)local bb=string.gsub(string.reverse(e('%.4f',fb)),'^0*%.?','')return bb==''and'0'or string.reverse(bb)end;local function fs(ft)if fh(ft)then return e('{x=%.3f,y=%.3f,z=%.3f}',ft.x,ft.y,ft.z)end;if fd(ft)and not getmetatable(ft)then local fu={}local fv=next(ft)if type(fv)=='nil'or fv==1 then fu=ft else for b9,ba in pairs(ft)do local dk=fs(ba)if type(b9)=='number'then table.insert(fu,e('[%s]=%s',b9,dk))else table.insert(fu,e('%s=%s',b9,dk))end end end;return e('{%s}',table.concat(fu,','))end;if ff(ft)then return e("'%s'",ft:gsub("'",[[\']]))end;return tostring(ft)end;local fw={}fw.__index=fw;fw.__tostring=function(ft,fx)local fy={}for b9 in pairs(ft)do table.insert(fy,b9)end;table.sort(fy)local fu={}for _,b9 in ipairs(fy)do local dk=fs(ft[b9])if type(b9)=='number'then table.insert(fu,e('[%s]=%s',b9,dk))else table.insert(fu,e('%s=%s',b9,dk))end end;if fx then return e('%s%s',fx,table.concat(fu,',\n'..fx))end;return e('{%s}',table.concat(fu,','))end;fw.__eq=function(fz,fA)return fz.planetarySystemId==fA.planetarySystemId and fz.bodyId==fA.bodyId and fo(fz.radius,fA.radius)and fo(fz.center.x,fA.center.x)and fo(fz.center.y,fA.center.y)and fo(fz.center.z,fA.center.z)and fo(fz.GM,fA.GM)end;local function fB(bD,bE,fC,fD,fE)assert(fc(bD),'Argument 1 (planetarySystemId) must be a number:'..type(bD))assert(fc(bE),'Argument 2 (bodyId) must be a number:'..type(bE))assert(fc(fC),'Argument 3 (radius) must be a number:'..type(fC))assert(fd(fD),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(fD))assert(fc(fE),'Argument 5 (GM) must be a number:'..type(fE))return setmetatable({planetarySystemId=tonumber(bD),bodyId=tonumber(bE),radius=tonumber(fC),center=vec3(fD),GM=tonumber(fE)},fw)end;local fF={}fF.__index=fF;fF.__tostring=function(fG)return e('::pos{%d,%d,%s,%s,%s}',fG.systemId,fG.bodyId,fr(fG.latitude*fl),fr(fG.longitude*fl),fr(fG.altitude))end;fF.__eq=function(fz,fA)return fz.bodyId==fA.bodyId and fz.systemId==fA.systemId and fo(fz.latitude,fA.latitude)and fo(fz.altitude,fA.altitude)and(fo(fz.longitude,fA.longitude)or fo(fz.latitude,math.pi/2)or fo(fz.latitude,-math.pi/2))end;local function fH(fI,bE,bF,bG,altitude)local bD=fI;if ff(fI)and not bG and not altitude and not bE and not bF then bD,bE,bF,bG,altitude=string.match(fI,bC)assert(bD,'Argument 1 (position string) is malformed.')else assert(fc(bD),'Argument 1 (systemId) must be a number:'..type(bD))assert(fc(bE),'Argument 2 (bodyId) must be a number:'..type(bE))assert(fc(bF),'Argument 3 (latitude) must be in degrees:'..type(bF))assert(fc(bG),'Argument 4 (longitude) must be in degrees:'..type(bG))assert(fc(altitude),'Argument 5 (altitude) must be in meters:'..type(altitude))end;bD=tonumber(bD)bE=tonumber(bE)bF=tonumber(bF)bG=tonumber(bG)altitude=tonumber(altitude)if bE==0 then return setmetatable({latitude=bF,longitude=bG,altitude=altitude,bodyId=bE,systemId=bD},fF)end;return setmetatable({latitude=fk*fn(bF,-90,90),longitude=fk*(bG%360),altitude=altitude,bodyId=bE,systemId=bD},fF)end;local fJ={}fJ.__index=fJ;fJ.__tostring=function(ft,fx)local fK=fx and fx..'  'local fL={}local fy={}for b9 in pairs(ft)do table.insert(fy,b9)end;table.sort(fy)for _,fM in ipairs(fy)do bdy=ft[fM]local fN=fw.__tostring(bdy,fK)if fx then table.insert(fL,e('[%s]={\n%s\n%s}',fM,fN,fx))else table.insert(fL,e('  [%s]=%s',fM,fN))end end;if fx then return e('\n%s%s%s',fx,table.concat(fL,',\n'..fx),fx)end;return e('{\n%s\n}',table.concat(fL,',\n'))end;local function fO(fP)local aS={}local pid;for _,ba in pairs(fP)do local bN=ba.planetarySystemId;if type(bN)~='number'then error('Invalid planetary system ID: '..tostring(bN))elseif pid and bN~=pid then error('Mismatch planetary system IDs: '..bN..' and '..pid)end;local fQ=ba.bodyId;if type(fQ)~='number'then error('Invalid body ID: '..tostring(fQ))elseif aS[fQ]then error('Duplicate body ID: '..tostring(fQ))end;setmetatable(ba.center,getmetatable(vec3.unit_x))aS[fQ]=setmetatable(ba,fw)pid=bN end;return setmetatable(aS,fJ)end;aX={}local function fR(fP)return setmetatable({galaxyAtlas=fP or{}},aX)end;aX.__index=function(fe,i)if type(i)=='number'then local system=fe.galaxyAtlas[i]return fO(system)end;return rawget(aX,i)end;aX.__pairs=function(ft)return function(fe,b9)local fS,nv=next(fe,b9)return fS,nv and fO(nv)end,ft.galaxyAtlas,nil end;aX.__tostring=function(ft)local fT={}for _,fU in pairs(ft or{})do local fV=fU:getPlanetarySystemId()local fW=fJ.__tostring(fU,'    ')table.insert(fT,e('  [%s]={%s\n  }',fV,fW))end;return e('{\n%s\n}\n',table.concat(fT,',\n'))end;aX.BodyParameters=fB;aX.MapPosition=fH;aX.PlanetarySystem=fO;function aX.createBodyParameters(fX,bE,fY,fZ,f_,g0,g1)assert(fc(fX),'Argument 1 (planetarySystemId) must be a number:'..type(fX))assert(fc(bE),'Argument 2 (bodyId) must be a number:'..type(bE))assert(fc(fY),'Argument 3 (surfaceArea) must be a number:'..type(fY))assert(fd(fZ),'Argument 4 (aPosition) must be an array or vec3:'..type(fZ))assert(fd(f_),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(f_))assert(fc(g0),'Argument 6 (altitude) must be in meters:'..type(g0))assert(fc(g1),'Argument 7 (gravityAtPosition) must be number:'..type(g1))local fC=math.sqrt(fY/4/math.pi)local a3=fC+g0;local g2=vec3(fZ)+a3*vec3(f_)local fE=g1*a3*a3;return fB(fX,bE,fC,g2,fE)end;aX.isMapPosition=fi;function aX:getPlanetarySystem(fI)if i==nil then i=0 end;if nv==nil then nv=0 end;local fX=fI;if fi(fI)then fX=fI.systemId end;if type(fX)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=fJ then system=fO(system)end;return system end end end;function fJ:castIntersections(g3,eB,g4,g5)local g4=g4 or function(g6)return 1.05*g6.radius end;local g7={}if g5 then for _,i in ipairs(g5)do g7[i]=self[i]end else g5={}for b9,g6 in pairs(self)do table.insert(g5,b9)g7[b9]=g6 end end;local function g8(g9,ga)local gb=g7[g9].center-g3;local gc=g7[ga].center-g3;return gb:len()<gc:len()end;table.sort(g5,g8)local gd=eB:normalize()for i,bN in ipairs(g5)do local g6=g7[bN]local ge=g6.center-g3;local fC=g4(g6)local gf=ge:dot(gd)local gg=gf^2-(ge:len2()-fC^2)if gg>=0 then local gh=math.sqrt(gg)local gi=gf+gh;local gj=gf-gh;if gj>0 then return g6,gi,gj elseif gi>0 then return g6,gi,nil end end end;return nil,nil,nil end;function fJ:closestBody(gk)assert(type(gk)=='table','Invalid coordinates.')local gl,g6;local gm=vec3(gk)for _,gn in pairs(self)do local go=(gn.center-gm):len2()if not g6 or go<gl then g6=gn;gl=go end end;return g6 end;function fJ:convertToBodyIdAndWorldCoordinates(fI)local gp=fI;if ff(fI)then gp=fH(fI)end;if gp.bodyId==0 then return 0,vec3(gp.latitude,gp.longitude,gp.altitude)end;local gn=self:getBodyParameters(gp)if gn then return gp.bodyId,gn:convertToWorldCoordinates(gp)end end;function fJ:getBodyParameters(fI)local bE=fI;if fi(fI)then bE=fI.bodyId end;assert(fc(bE),'Argument 1 (bodyId) must be a number:'..type(bE))return self[bE]end;function fJ:getPlanetarySystemId()local _,ba=next(self)return ba and ba.planetarySystemId end;function fw:convertToMapPosition(fD)assert(fd(fD),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(fD))local gq=vec3(fD)if self.bodyId==0 then return setmetatable({latitude=gq.x,longitude=gq.y,altitude=gq.z,bodyId=0,systemId=self.planetarySystemId},fF)end;local gr=gq-self.center;local a3=gr:len()local altitude=a3-self.radius;local bF=0;local bG=0;if not fo(a3,0)then local gs=math.atan(gr.y,gr.x)bG=gs>=0 and gs or 2*math.pi+gs;bF=math.pi/2-math.acos(gr.z/a3)end;return setmetatable({latitude=bF,longitude=bG,altitude=altitude,bodyId=self.bodyId,systemId=self.planetarySystemId},fF)end;function fw:convertToWorldCoordinates(fI)local gp=ff(fI)and fH(fI)or fI;if gp.bodyId==0 then return vec3(gp.latitude,gp.longitude,gp.altitude)end;assert(fi(gp),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(gp.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(gp.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local bH=math.cos(gp.latitude)return self.center+(self.radius+gp.altitude)*vec3(bH*math.cos(gp.longitude),bH*math.sin(gp.longitude),math.sin(gp.latitude))end;function fw:getAltitude(fD)return(vec3(fD)-self.center):len()-self.radius end;function fw:getDistance(fD)return(vec3(fD)-self.center):len()end;function fw:getGravity(fD)local gt=self.center-vec3(fD)local gu=gt:len2()return self.GM/gu*gt/math.sqrt(gu)end;return setmetatable(aX,{__call=function(_,...)return fR(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function ff(fg)return type(fg)=='string'end;local function fd(fe)return type(fe)=='table'end;local function fo(fp,fq)if fp==0 then return math.abs(fq)<1e-09 end;if fq==0 then return math.abs(fp)<1e-09 end;return math.abs(fp-fq)<math.max(math.abs(fp),math.abs(fq))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(altitude)assert(self.body)local a3=altitude+self.body.radius;if not fo(a3,0)then local orbit=math.sqrt(self.body.GM/a3)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(fI,b4)assert(self.body)assert(fd(fI)or ff(fI))assert(fd(b4))local bB=(ff(fI)or PlanetRef.isMapPosition(fI))and self.body:convertToWorldCoordinates(fI)or vec3(fI)local ba=vec3(b4)local gv=bB-self.body.center;local gc=ba:len2()local gw=gv:len()local gx=self.body.GM;local gy=((gc-gx/gw)*gv-gv:dot(ba)*ba)/gx;local fp=gx/(2*gx/gw-gc)local gz=gy:len()local gd=gy:normalize()local gA=fp*(1-gz)local gB=fp*(1+gz)local gC=gA*gd+self.body.center;local gD=gz<=1 and-gB*gd+self.body.center or nil;local gE=math.sqrt(fp*gx*(1-gz*gz))local gF=gD and 2*math.pi*math.sqrt(fp^3/gx)local gG=math.acos(gy:dot(gv)/(gz*gw))if gv:dot(ba)<0 then gG=-(gG-2*math.pi)end;local gH=math.acos((math.cos(gG)+gz)/(1+gz*math.cos(gG)))local gI=gH;if gI<0 then gI=gI+2*math.pi end;local gJ=gI-gz*math.sin(gI)local gK=0;local gL=0;local gM=0;if gF~=nil then gK=gJ/(2*math.pi/gF)gL=gF-gK;gM=gL+gF/2;if gG-math.pi>0 then gL=gK;gM=gL+gF/2 end;if gM>gF then gM=gM-gF end end;return{periapsis={position=gC,speed=gE/gA,circularOrbitSpeed=math.sqrt(gx/gA),altitude=gA-self.body.radius},apoapsis=gD and{position=gD,speed=gE/gB,circularOrbitSpeed=math.sqrt(gx/gB),altitude=gB-self.body.radius},currentVelocity=ba,currentPosition=bB,eccentricity=gz,period=gF,eccentricAnomaly=gH,meanAnomaly=gJ,timeToPeriapsis=gL,timeToApoapsis=gM}end;local function gN(gO)local gn=PlanetRef.BodyParameters(gO.planetarySystemId,gO.bodyId,gO.radius,gO.center,gO.GM)return setmetatable({body=gn},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return gN(...)end})end;function Kinematics()local aZ={}local gP=30000000/3600;local gQ=gP*gP;local gR=100;local function gS(ba)return 1/math.sqrt(1-ba*ba/gQ)end;function aZ.computeAccelerationTime(gT,gU,gV)local gW=gP*math.asin(gT/gP)return(gP*math.asin(gV/gP)-gW)/gU end;function aZ.computeDistanceAndTime(gT,gV,gX,gY,gZ,g_)gZ=gZ or 0;g_=g_ or 0;local h0=gT<=gV;local h1=gY*(h0 and 1 or-1)/gX;local h2=-g_/gX;local h3=h1+h2;if h0 and h3<=0 or not h0 and h3>=0 then return-1,-1 end;local h4,h5=0,0;if h1~=0 and gZ>0 then local gW=math.asin(gT/gP)local h6=math.pi*(h1/2+h2)local h7=h1*gZ;local h8=gP*math.pi;local ba=function(fe)local cc=(h6*fe-h7*math.sin(math.pi*fe/2/gZ)+h8*gW)/h8;local h9=math.tan(cc)return gP*h9/math.sqrt(h9*h9+1)end;local ha=h0 and function(fg)return fg>=gV end or function(fg)return fg<=gV end;h5=2*gZ;if ha(ba(h5))then local hb=0;while math.abs(h5-hb)>0.5 do local fe=(h5+hb)/2;if ha(ba(fe))then h5=fe else hb=fe end end end;local hc=gT;local hd=h5/gR;for he=1,gR do local bm=ba(he*hd)h4=h4+(bm+hc)*hd/2;hc=bm end;if h5<2*gZ then return h4,h5 end;gT=hc end;local gW=gP*math.asin(gT/gP)local bc=(gP*math.asin(gV/gP)-gW)/h3;local hf=gQ*math.cos(gW/gP)/h3;local a3=hf-gQ*math.cos((h3*bc+gW)/gP)/h3;return a3+h4,bc+h5 end;function aZ.computeTravelTime(gT,gU,a3)if a3==0 then return 0 end;if gU>0 then local gW=gP*math.asin(gT/gP)local hf=gQ*math.cos(gW/gP)/gU;return(gP*math.acos(gU*(hf-a3)/gQ)-gW)/gU end;assert(gT>0,'Acceleration and initial speed are both zero.')return a3/gT end;function aZ.lorentz(ba)return gS(ba)end;return aZ end;function script.onStart()VERSION_NUMBER=4.925;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()aX=PlanetRef()aY=aX(Atlas())aZ=Kinematics()a_=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bL=j()if door and(bL>0 or bL==0 and ae<10000)then for _,ba in pairs(door)do ba.toggle()end end;if switch then for _,ba in pairs(switch)do ba.toggle()end end;if forcefield and(bL>0 or bL==0 and ae<10000)then for _,ba in pairs(forcefield)do ba.toggle()end end;if dbHud_1 then if not Y then for b9,ba in pairs(b)do dbHud_1.setStringValue(ba,g(_G[ba]))end;for b9,ba in pairs(a)do dbHud_1.setStringValue(ba,g(_G[ba]))end;c("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(hg)if hg=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local hh=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if hh then a3=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else a3=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b5)R,S=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b5)R,S=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(a3)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..getDistanceDisplayString(P)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(Q)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..getDistanceDisplayString(R)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(S)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif hg=="oneSecond"then ab=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local bR={}local cS=GetFlightStyle()DrawOdometer(bR,W,TotalDistanceTravelled,cS,X)CheckDamage(bR)a5=table.concat(bR,"")collectgarbage("collect")elseif hg=="fiveSecond"then ac=dbHud_1.getStringValue("SPBAutopilotTargetName")if ac~=nil and ac~=""and ac~="SatNavNotChanged"then local bb=json.decode(dbHud_1.getStringValue("SavedLocations"))if bb~=nil then _G["SavedLocations"]=bb;local bP=-1;local bK;for b9,ba in pairs(SavedLocations)do if ba.name and ba.name=="SatNav Location"then bP=b9;break end end;if bP~=-1 then bK=SavedLocations[bP]bP=-1;for b9,ba in pairs(aS[0])do if ba.name and ba.name=="SatNav Location"then bP=b9;break end end;if bP>-1 then aS[0][bP]=bK end;UpdateAtlasLocationsList()K=bK.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ac then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif hg=="msgTick"then local bR={}DisplayMessage(bR,"empty")K="empty"unit.stopTimer("msgTick")a2=3 elseif hg=="animateTick"then b1=true;b0=false;a0=0;a1=0;unit.stopTimer("animateTick")elseif hg=="hudTick"then local hi=system.getMouseDeltaX()local hj=system.getMouseDeltaY()local bR={}HUDPrologue(bR)if showHud then UpdateHud(bR)else DisplayOrbitScreen(bR)DrawWarnings(bR)end;HUDEpilogue(bR)bR[#bR+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0" viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if K~="empty"then DisplayMessage(bR,K)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(bR)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a0=screen_1.getMouseX()*ResolutionX;a1=screen_1.getMouseY()*ResolutionY;SetButtonContains()DrawButtons(bR)if screen_1.getMouseState()==1 then CheckButtons()end;bR[#bR+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)elseif system.isViewLocked()==0 then if o()==1 and J then if not b0 then a0=a0+hi;a1=a1+hj end;SetButtonContains()DrawButtons(bR)if not b0 and not b1 then local hk=table.concat(bR,"")bR={}bR[#bR+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bR[#bR+1]=aT;bR[#bR+1]=hk;bR[#bR+1]="</body>"b0=true;bR[#bR+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(bR,"")system.setScreen(content)elseif b1 then local hk=table.concat(bR,"")bR={}bR[#bR+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bR[#bR+1]=aT;bR[#bR+1]=hk;bR[#bR+1]="</body>"end;if not b0 then bR[#bR+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end else CheckButtons()a0=0;a1=0 end else a0=a0+hi;a1=a1+hj;a3=math.sqrt(a0*a0+a1*a1)if not J and o()==0 then if userControlScheme=="virtual joystick"then if a0>0 and a0>DeadZone then D=D-(a0-DeadZone)*MouseXSensitivity elseif a0<0 and a0<DeadZone*-1 then D=D-(a0+DeadZone)*MouseXSensitivity else D=0 end;if a1>0 and a1>DeadZone then C=C-(a1-DeadZone)*MouseYSensitivity elseif a1<0 and a1<DeadZone*-1 then C=C-(a1+DeadZone)*MouseYSensitivity else C=0 end elseif userControlScheme=="mouse"then a0=0;a1=0;C=(-utils.smoothstep(hj,-100,100)+0.5)*2*y;D=(-utils.smoothstep(hi,-100,100)+0.5)*2*z else a0=0;a1=0 end;CheckButtons()if a3>DeadZone then DrawCursorLine(bR)end elseif J then SetButtonContains()DrawButtons(bR)end;bR[#bR+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end;bR[#bR+1]=[[</svg></body>]]content=table.concat(bR,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif hg=="apTick"then b3=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ad=j()>0;D=0;H=0;C=0;b4=vec3(core.getWorldVelocity())b5=vec3(b4):len()sys=aY[0]planet=sys:closestBody(core.getConstructWorldPos())if planet.name=="Space"then planet=aS[0][2]end;kepPlanet=a_(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),b4)aa=hoverDetectGround()local hl=b5>8334;if b5>SpaceSpeedLimit/3.6 and not ad and not Autopilot then K="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if not hl and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=hl;if ad and j()>0.09 then if not ai then if b5>AtmoSpeedLimit/3.6 then BrakeIsOn=true;ai=true end else if b5<AtmoSpeedLimit/3.6 then BrakeIsOn=false;ai=false end end end;if BrakeIsOn then G=1 else G=0 end;ae=core.getAltitude()if ae==0 then ae=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if b5>w then local hm=AlignToWorldVector(vec3(b4),0.01)if a7 then b2=true;if b5<ReentrySpeed/3.6 then BrakeIsOn=false;ProgradeIsOn=false;x=true;a7=false;a9=true;Autopilot=false;b2=autoRollPreference;BeginReentry()else BrakeIsOn=true end end end end;if RetrogradeIsOn then if ad then RetrogradeIsOn=false elseif b5>w then AlignToWorldVector(-vec3(b4))end end;if not ProgradeIsOn and a7 then if j()==0 then x=true;BeginReentry()a7=false;a9=true else a7=false;ToggleAutopilot()end end;if a9 and ae<ReentryAltitude+100 and b5*3.6>ReentrySpeed-100 then ToggleAutopilot()a9=false end;if Autopilot and j()==0 and not a7 then local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b5)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b5)end;P=P;Q=Q;local hn=AutopilotTargetCoords;if orbit.apoapsis==nil and b5>300 and AutopilotAccelerating then local ho=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(b4):normalize()local hp=getMagnitudeInDirection(ho,AutopilotShipUp)local hq=getMagnitudeInDirection(ho,AutopilotShipRight)local hr=-hq*AutopilotDistance*b5*TrajectoryAlignmentStrength;local hs=-hp*AutopilotDistance*b5*TrajectoryAlignmentStrength;hn=AutopilotTargetCoords+-hr*vec3(AutopilotShipRight)+-hs*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(hn)-vec3(core.getConstructWorldPos())):len()local ht=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(ht)..'", "unit":""}')local hu=true;local hv=(V.center-(vec3(core.getConstructWorldPos())+vec3(b4):normalize()*AutopilotDistance)):len()-V.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(hv)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then hu=AlignToWorldVector((hn-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then hu=AlignToWorldVector(-vec3(b4):normalize())end;if AutopilotAccelerating then if not hu or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(b4)<0 and b5>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false elseif not u then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(hv-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and u then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end;if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end elseif AutopilotBraking then BrakeIsOn=true;G=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and b5<50 then K="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"elseif(CustomTarget==nil or CustomTarget~=nil and CustomTarget.planetname~="Space")and orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>L or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"K="Autopilot completed, orbit established"G=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;a7=true end end end elseif AutopilotCruising then if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if hu then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not a7 then AutopilotTargetCoords=vec3(V.center)+(AutopilotTargetOrbit+V.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif hu then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not u then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true;BrakeIsOn=false end end end end end;if I then b2=true;local hw=0;local bB=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local hx=bB-vec3(core.getConstructWorldPos())local hy=vec3(hx):project_on(vec3(core.getConstructWorldOrientationForward())):len()local hz=vec3(hx):project_on(vec3(core.getConstructWorldOrientationRight())):len()local a3=math.sqrt(hy*hy+hz*hz)AlignToWorldVector(hx:normalize())local hA=40;local hB=a3<hA;local hC=100;local hD=utils.clamp((a3-hA)/2,10,hC)C=0;local hu=math.abs(D)<0.1;if hu and b5<hD and not hB then BrakeIsOn=false;hw=-20 else BrakeIsOn=true;hw=0 end;local bU=vec3(core.getConstructWorldOrientationForward())local bV=vec3(core.getConstructWorldOrientationRight())local bW=vec3(core.getWorldVertical())local bX=getPitch(bW,bU,bV)local hE=1.0;if math.abs(hw-bX)>hE then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(hw-bX)local hF=pitchPID:get()C=hF end end;local dp=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local d4=unit.getClosestPlanetInfluence()>0;local hG=HoldAltitude-ae;local hH=500+b5;local hw=0;if AggAltHoldLockable()then local hI=antigrav.getBaseAltitude()hG=hI-(altitude+15)hH=500+b5*1.3;hw=(utils.smoothstep(hG,-hH,hH)-0.5)*2.2*MaxPitch elseif AltitudeHold then hw=(utils.smoothstep(hG,-hH,hH)-0.5)*2*MaxPitch end;if LockPitch~=nil then if d4 then hw=LockPitch else LockPitch=nil end end;b2=true;if Reentry then local hJ=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=hJ then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,hJ)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not x then hw=-80;if j()>0.02 then K="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;hw=0;b2=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then x=false;Reentry=false;b2=autoRollPreference end end;local hK=C;if b5>w and not a8 then AlignToWorldVector(vec3(b4))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local cK=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(cK)local hL=cK:len()-cK:project_on(dp):len()local bn=LastMaxBrakeInAtmo;local dm=b4.x*dp.x+b4.y*dp.y+b4.z*dp.z;local hM=b4:len()-math.abs(dm)local hN=vec3(core.getWorldAirFrictionAcceleration())if bn~=nil then P,Q=aZ.computeDistanceAndTime(hM,0,n(),0,0,bn+(hN:len()-hN:project_on(dp):len())*n())else P,Q=aZ.computeDistanceAndTime(hM,0,n(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*n())end;StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if hL<=P then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and hL>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=hL end;C=hK;local bU=vec3(core.getConstructWorldOrientationForward())local bV=vec3(core.getConstructWorldOrientationRight())local bW=vec3(core.getWorldVertical())local eN=-1;local bX=getPitch(bW,bU,bV)local hE=0.1;if BrakeLanding then hw=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local dm=b4.x*dp.x+b4.y*dp.y+b4.z*dp.z;eN=aa;if eN>-1 then if math.abs(hw-bX)<hE then b2=autoRollPreference;if b5<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)Z=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and b4:normalize():dot(-dp)<0.99 then BrakeIsOn=true elseif dm<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff or a8 then if hw<15 then AutoTakeoff=false;if not a8 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end elseif a8 and b5<w then Autopilot=true;a8=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)elseif a8 then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)BrakeIsOn=true end elseif a8 and j()==0 and ae>75000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=1500 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,1500)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;if math.abs(hw-bX)>hE then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(hw-bX)local hF=pitchPID:get()C=C+hF end end;L=orbit.eccentricity;if antigrav and not ExternalAGG and ae<200000 then if AntigravTargetAltitude==nil then AntigravTargetAltitude=1000 end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then if not AntigravTargetAltitude or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;pitchSpeedFactor=math.max(pitchSpeedFactor or 0.01,0.01)yawSpeedFactor=math.max(yawSpeedFactor or 0.01,0.01)rollSpeedFactor=math.max(rollSpeedFactor or 0.01,0.01)torqueFactor=math.max(torqueFactor or 0.01,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor or 0.01,0.01)brakeFlatFactor=math.max(brakeFlatFactor or 0.01,0.01)autoRollFactor=math.max(autoRollFactor or 0.01,0.01)turnAssistFactor=math.max(turnAssistFactor or 0.01,0.01)local hO=utils.clamp(B+C+system.getControlDeviceForwardInput(),-1,1)local hP=utils.clamp(E+H+system.getControlDeviceYawInput(),-1,1)local hQ=utils.clamp(F+D-system.getControlDeviceLeftRightInput(),-1,1)local hR=G;local hS=vec3(core.getWorldVertical())local hT=vec3(core.getConstructWorldOrientationUp())local hU=vec3(core.getConstructWorldOrientationForward())local hV=vec3(core.getConstructWorldOrientationRight())local hW=vec3(core.getWorldVelocity())local hX=vec3(core.getWorldVelocity()):normalize()local hY=getRoll(hS,hU,hV)local hZ=math.abs(hY)local h_=utils.sign(hY)local j=j()local i0=vec3(core.getWorldAngularVelocity())local i1=hO*pitchSpeedFactor*hV+hP*rollSpeedFactor*hU+hQ*yawSpeedFactor*hT;if hS:len()>0.01 and j>0.0 or ProgradeIsOn then local i2=1.0;if b2==true and hZ>i2 and hP==0 then local i3=utils.clamp(0,hZ-30,hZ+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(i3-hY)local i4=rollPID:get()i1=i1+i4*hU end end;if hS:len()>0.01 and j>0.0 then local i5=20.0;if turnAssist==true and hZ>i5 and hO==0 and hQ==0 then local i6=turnAssistFactor*0.1;local i7=turnAssistFactor*0.025;local i8=(hZ-i5)/(180-i5)*180;local i9=0;if i8<90 then i9=i8/90 elseif i8<180 then i9=(180-i8)/90 end;i9=i9*i9;local ia=-h_*i7*(1.0-i9)local ib=i6*i9;i1=i1+ib*hV+ia*hT end end;local ic=1;local id=0;local ie=1;local ig=torqueFactor*(i1-i0)local ih=vec3(core.getWorldAirFrictionAngularAcceleration())ig=ig-ih;Nav:setEngineTorqueCommand('torque',ig,ic,'airfoil','','',ie)local ii=-hR*(brakeSpeedFactor*hW+brakeFlatFactor*hX)Nav:setEngineForceCommand('brake',ii)local ij=''local ik=vec3()local il=false;local im='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then im=im..ExtraLongitudeTags end;local io=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if io==axisCommandType.byThrottle then local ip=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(im,axisCommandId.longitudinal)Nav:setEngineForceCommand(im,ip,ic)elseif io==axisCommandType.byTargetSpeed then local ip=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)ij=ij..' , '..im;ik=ik+ip;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then il=true end end;local iq='thrust analog lateral 'if ExtraLateralTags~="none"then iq=iq..ExtraLateralTags end;local ir=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if ir==axisCommandType.byThrottle then local is=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(iq,axisCommandId.lateral)Nav:setEngineForceCommand(iq,is,ic)elseif ir==axisCommandType.byTargetSpeed then local it=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)ij=ij..' , '..iq;ik=ik+it end;local iu='thrust analog vertical 'if ExtraVerticalTags~="none"then iu=iu..ExtraVerticalTags end;local iv=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if iv==axisCommandType.byThrottle then local iw=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(iu,axisCommandId.vertical)if Z~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(iu,iw,ic,'airfoil','ground','',ie)else Nav:setEngineForceCommand(iu,vec3(),ic)Nav:setEngineForceCommand('airfoil vertical',iw,ic,'airfoil','','',ie)Nav:setEngineForceCommand('ground vertical',iw,ic,'ground','','',ie)end elseif iv==axisCommandType.byTargetSpeed then if Z==0 then Nav:setEngineForceCommand('hover',vec3(),ic)end;local ix=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)ij=ij..' , '..iu;ik=ik+ix end;if ik:len()>constants.epsilon then if G~=0 or il or math.abs(hX:dot(hU))<0.95 then ij=ij..', brake'end;Nav:setEngineForceCommand(ij,ik,id,'','','',ie)end;Nav:setBoosterCommand('rocket_engine')if O and not VanillaRockets then local bm=vec3(core.getVelocity()):len()local iy=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local iz=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bm*3.6>iz*(1-iy)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bm*3.6<iz*(1-iy)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local iA=unit.getThrottle()local hD=iA/100;if j==0 then hD=hD*MaxGameVelocity;if bm>=hD*(1-iy)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bm<hD*(1-iy)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else hD=hD*ReentrySpeed/3.6;if bm>=hD*(1-iy)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bm<hD*(1-iy)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bb=coroutine.resume(beginSetup)if bb then SetupComplete=true end else Nav:update()if not b0 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(iB)if iB=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and aa==-1 and(j()>0 or ae<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b5>w then K="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;b2=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif iB=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif iB=="forward"then B=B-1 elseif iB=="backward"then B=B+1 elseif iB=="left"then E=E-1 elseif iB=="right"then E=E+1 elseif iB=="yawright"then F=F-1 elseif iB=="yawleft"then F=F+1 elseif iB=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif iB=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif iB=="up"then Z=Z+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif iB=="down"then Z=Z-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif iB=="groundaltitudeup"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AggAltHoldLocked()then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end else AntigravTargetAltitude=(desiredBaseAltitude or 1000)+100 end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end elseif AltitudeHold then HoldAltitude=HoldAltitude+M;if HoldAltitude>50000 then HoldAltitude=50000 end else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif iB=="groundaltitudedown"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AggAltHoldLocked()then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N end else AntigravTargetAltitude=desiredBaseAltitude or 1000 end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end elseif AltitudeHold then HoldAltitude=HoldAltitude-M;if HoldAltitude<-1500 then HoldAltitude=ae end else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif iB=="option1"then IncrementAutopilotTargetIndex()v=false elseif iB=="option2"then DecrementAutopilotTargetIndex()v=false elseif iB=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;v=false;ToggleWidgets()elseif iB=="option4"then ToggleAutopilot()v=false elseif iB=="option5"then ToggleLockPitch()v=false elseif iB=="option6"then ToggleAltitudeHold()v=false elseif iB=="option7"then wipeSaveVariables()v=false elseif iB=="option8"then ToggleFollowMode()v=false elseif iB=="option9"then if gyro~=nil then gyro.toggle()ah=gyro.getState()==1 end;v=false elseif iB=="lshift"then if system.isViewLocked()==1 then J=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then J=true;b1=false;b0=false end elseif iB=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif iB=="lalt"then if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif iB=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not O then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;O=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;O=false end elseif iB=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()elseif iB=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif iB=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif iB=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(iB)if iB=="forward"then B=0 elseif iB=="backward"then B=0 elseif iB=="left"then E=0 elseif iB=="right"then E=0 elseif iB=="yawright"then F=0 elseif iB=="yawleft"then F=0 elseif iB=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif iB=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif iB=="up"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iB=="down"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iB=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iB=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iB=="lshift"then if system.isViewLocked()==1 then J=false;a0=0;a1=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then J=false;b1=false;b0=false end elseif iB=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif iB=="lalt"then if o()==0 and freeLookToggle then if v then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else v=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function AggAltHoldLockable()if not AltitudeHold or not antigrav or ExternalAGG or antigrav.getState()==0 or AntigravTargetAltitude==nil then return false end;local hI=antigrav.getBaseAltitude()if HoldAltitude>=1000 and ae>=HoldAltitude-20 and ae<=HoldAltitude+20 and hI>=1000 and hI<HoldAltitude+20 and hI>HoldAltitude-20 then return true end;return false end;function AggAltHoldLocked()if not AltitudeHold or not antigrav or ExternalAGG or antigrav.getState()==0 or AntigravTargetAltitude==nil then return false end;return HoldAltitude>=1000 and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 end;function script.onActionLoop(iB)if iB=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AggAltHoldLocked()then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end;if N*1.05<1000 then N=N*1.05 else N=1000 end else AntigravTargetAltitude=desiredBaseAltitude+100 end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;BrakeIsOn=false elseif AltitudeHold then HoldAltitude=HoldAltitude+M;if M*1.05<1000 then M=M*1.05 else M=1000 end else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif iB=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AggAltHoldLocked()then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N end;if N*1.05<1000 then N=N*1.05 else N=1000 end else AntigravTargetAltitude=desiredBaseAltitude-100 end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;BrakeIsOn=false elseif AltitudeHold then HoldAltitude=HoldAltitude-M;if M*1.05<1000 then M=M*1.05 else M=1000 end;if HoldAltitude<-1500 then HoldAltitude=ae end else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif iB=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif iB=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function script.onInputText(iC)local i;local iD="/commands /setname /G /agg /addlocation"local iE,iF;local iG="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n/".."addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location"i=string.find(iC," ")if i~=nil then iE=string.sub(iC,0,i-1)iF=string.sub(iC,i+1)elseif i==nil or not string.find(iD,iE)then for f5 in string.gmatch(iG,"([^\n]+)")do c(f5)end;return end;if iE=="/setname"then if iF==nil or iF==""then K="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(iF)else K="Select a saved target to rename first"end elseif iE=="/addlocation"then if iF==nil or iF==""or string.find(iF,"::")==nil then K="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(iF,"::")local bJ=string.sub(iF,1,i-2)local bB=string.sub(iF,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bC='::pos{'..p..','..p..','..p..','..p..','..p..'}'local bD,bE,bF,bG,altitude=string.match(bB,bC)local planet=aS[tonumber(bD)][tonumber(bE)]AddNewLocationByWaypoint(bJ,planet,bB)K="Added "..bJ.." to saved locations,\nplanet "..planet.name.." at "..bB;a2=5 elseif iE=="/agg"then if iF==nil or iF==""then K="Usage: /agg targetheight"return end;iF=tonumber(iF)if iF<1000 then iF=1000 end;AntigravTargetAltitude=iF;K="AGG Target Height set to "..iF elseif iE=="/G"then if iF==nil or iF==""then K="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if iF=="dump"then for b9,ba in pairs(a)do if type(_G[ba])=="boolean"then if _G[ba]==true then c(ba.." true")else c(ba.." false")end elseif _G[ba]==nil then c(ba.." nil")else c(ba.." ".._G[ba])end end;return end;i=string.find(iF," ")local iH=string.sub(iF,0,i-1)local iI=string.sub(iF,i+1)for b9,ba in pairs(a)do if ba==iH then K="Variable "..iH.." changed to "..iI;local iJ=type(_G[ba])if iJ=="number"then iI=tonumber(iI)elseif iJ=="boolean"then if string.lower(iI)=="true"then iI=true else iI=false end end;_G[ba]=iI;return end end;K="No such global variable: "..iH end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
